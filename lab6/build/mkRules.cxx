/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Mar  7 17:39:05 PST 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkRules.h"


/* String declarations */
static std::string const __str_literal_2("Request to go down from Floor 2", 31u);
static std::string const __str_literal_4("Request to go up from Floor 1", 29u);
static std::string const __str_literal_7("The elevator is moving down", 27u);
static std::string const __str_literal_6("The elevator is moving up", 25u);
static std::string const __str_literal_1("The elevator stops at floor %d", 30u);
static std::string const __str_literal_5("desitination is set to Floor 0", 30u);
static std::string const __str_literal_3("destination is set to Floor 0", 29u);


/* Constructor */
MOD_mkRules::MOD_mkRules(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_direction(simHdl, "direction", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_move_down_timer(simHdl, "move_down_timer", this, 32u, 0u, (tUInt8)0u),
    INST_move_up_timer(simHdl, "move_up_timer", this, 32u, 0u, (tUInt8)0u),
    INST_moving(simHdl, "moving", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_myElevator(simHdl, "myElevator", this),
    INST_realFloor(simHdl, "realFloor", this, 32u, 0u, (tUInt8)0u),
    INST_setFloor(simHdl, "setFloor", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_step(simHdl, "step", this, 32u, 0u, (tUInt8)0u),
    INST_trace_step(simHdl, "trace_step", this, 32u, 0u, (tUInt8)0u),
    INST_update(simHdl, "update", this, 1u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 47u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkRules::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h388", SYM_DEF, &DEF_b__h388, 32u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_check_stop", SYM_DEF, &DEF_CAN_FIRE_RL_check_stop, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_RL_finish", SYM_DEF, &DEF_CAN_FIRE_RL_finish, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_RL_move_down", SYM_DEF, &DEF_CAN_FIRE_RL_move_down, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_RL_move_up", SYM_DEF, &DEF_CAN_FIRE_RL_move_up, 1u);
  init_symbol(&symbols[5u], "CAN_FIRE_RL_nothing", SYM_DEF, &DEF_CAN_FIRE_RL_nothing, 1u);
  init_symbol(&symbols[6u], "CAN_FIRE_RL_set_floor", SYM_DEF, &DEF_CAN_FIRE_RL_set_floor, 1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_start", SYM_DEF, &DEF_CAN_FIRE_RL_start, 1u);
  init_symbol(&symbols[8u], "CAN_FIRE_RL_step_1", SYM_DEF, &DEF_CAN_FIRE_RL_step_1, 1u);
  init_symbol(&symbols[9u], "CAN_FIRE_RL_step_2", SYM_DEF, &DEF_CAN_FIRE_RL_step_2, 1u);
  init_symbol(&symbols[10u], "CAN_FIRE_RL_step_3", SYM_DEF, &DEF_CAN_FIRE_RL_step_3, 1u);
  init_symbol(&symbols[11u], "CAN_FIRE_RL_step_4", SYM_DEF, &DEF_CAN_FIRE_RL_step_4, 1u);
  init_symbol(&symbols[12u], "CAN_FIRE_RL_update_state", SYM_DEF, &DEF_CAN_FIRE_RL_update_state, 1u);
  init_symbol(&symbols[13u], "direction", SYM_MODULE, &INST_direction);
  init_symbol(&symbols[14u], "move_down_timer", SYM_MODULE, &INST_move_down_timer);
  init_symbol(&symbols[15u], "move_up_timer", SYM_MODULE, &INST_move_up_timer);
  init_symbol(&symbols[16u], "moving", SYM_MODULE, &INST_moving);
  init_symbol(&symbols[17u], "myElevator", SYM_MODULE, &INST_myElevator);
  init_symbol(&symbols[18u], "RL_check_stop", SYM_RULE);
  init_symbol(&symbols[19u], "RL_finish", SYM_RULE);
  init_symbol(&symbols[20u], "RL_move_down", SYM_RULE);
  init_symbol(&symbols[21u], "RL_move_up", SYM_RULE);
  init_symbol(&symbols[22u], "RL_nothing", SYM_RULE);
  init_symbol(&symbols[23u], "RL_set_floor", SYM_RULE);
  init_symbol(&symbols[24u], "RL_start", SYM_RULE);
  init_symbol(&symbols[25u], "RL_step_1", SYM_RULE);
  init_symbol(&symbols[26u], "RL_step_2", SYM_RULE);
  init_symbol(&symbols[27u], "RL_step_3", SYM_RULE);
  init_symbol(&symbols[28u], "RL_step_4", SYM_RULE);
  init_symbol(&symbols[29u], "RL_update_state", SYM_RULE);
  init_symbol(&symbols[30u], "realFloor", SYM_MODULE, &INST_realFloor);
  init_symbol(&symbols[31u], "setFloor", SYM_MODULE, &INST_setFloor);
  init_symbol(&symbols[32u], "step", SYM_MODULE, &INST_step);
  init_symbol(&symbols[33u], "trace_step", SYM_MODULE, &INST_trace_step);
  init_symbol(&symbols[34u], "update", SYM_MODULE, &INST_update);
  init_symbol(&symbols[35u], "WILL_FIRE_RL_check_stop", SYM_DEF, &DEF_WILL_FIRE_RL_check_stop, 1u);
  init_symbol(&symbols[36u], "WILL_FIRE_RL_finish", SYM_DEF, &DEF_WILL_FIRE_RL_finish, 1u);
  init_symbol(&symbols[37u], "WILL_FIRE_RL_move_down", SYM_DEF, &DEF_WILL_FIRE_RL_move_down, 1u);
  init_symbol(&symbols[38u], "WILL_FIRE_RL_move_up", SYM_DEF, &DEF_WILL_FIRE_RL_move_up, 1u);
  init_symbol(&symbols[39u], "WILL_FIRE_RL_nothing", SYM_DEF, &DEF_WILL_FIRE_RL_nothing, 1u);
  init_symbol(&symbols[40u], "WILL_FIRE_RL_set_floor", SYM_DEF, &DEF_WILL_FIRE_RL_set_floor, 1u);
  init_symbol(&symbols[41u], "WILL_FIRE_RL_start", SYM_DEF, &DEF_WILL_FIRE_RL_start, 1u);
  init_symbol(&symbols[42u], "WILL_FIRE_RL_step_1", SYM_DEF, &DEF_WILL_FIRE_RL_step_1, 1u);
  init_symbol(&symbols[43u], "WILL_FIRE_RL_step_2", SYM_DEF, &DEF_WILL_FIRE_RL_step_2, 1u);
  init_symbol(&symbols[44u], "WILL_FIRE_RL_step_3", SYM_DEF, &DEF_WILL_FIRE_RL_step_3, 1u);
  init_symbol(&symbols[45u], "WILL_FIRE_RL_step_4", SYM_DEF, &DEF_WILL_FIRE_RL_step_4, 1u);
  init_symbol(&symbols[46u],
	      "WILL_FIRE_RL_update_state",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_update_state,
	      1u);
}


/* Rule actions */

void MOD_mkRules::RL_start()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  INST_myElevator.METH_setCurrentFloor(DEF_b__h388);
  INST_step.METH_write(4294967295u);
  INST_update.METH_write((tUInt8)1u);
}

void MOD_mkRules::RL_step_1()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_signed_realFloor___d14 = DEF_b__h388;
  INST_myElevator.METH_floor_2_down_request();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_realFloor___d14);
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  }
  INST_step.METH_write(1u);
  INST_update.METH_write((tUInt8)1u);
}

void MOD_mkRules::RL_step_2()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_signed_realFloor___d14 = DEF_b__h388;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_realFloor___d14);
  INST_myElevator.METH_floor_0_des_request();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
  INST_myElevator.METH_floor_1_up_request();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
  INST_step.METH_write(2u);
  INST_update.METH_write((tUInt8)1u);
}

void MOD_mkRules::RL_step_3()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_signed_realFloor___d14 = DEF_b__h388;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_realFloor___d14);
  INST_update.METH_write((tUInt8)1u);
  INST_step.METH_write(3u);
}

void MOD_mkRules::RL_step_4()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_signed_realFloor___d14 = DEF_b__h388;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_realFloor___d14);
    dollar_display(sim_hdl, this, "s", &__str_literal_5);
  }
  INST_myElevator.METH_floor_0_des_request();
  INST_update.METH_write((tUInt8)1u);
  INST_step.METH_write(4u);
}

void MOD_mkRules::RL_finish()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_signed_realFloor___d14 = DEF_b__h388;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_realFloor___d14);
    dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_mkRules::RL_update_state()
{
  tUInt8 DEF_myElevator_direction____d35;
  tUInt8 DEF_myElevator_moving____d36;
  DEF_myElevator_moving____d36 = INST_myElevator.METH_moving();
  DEF_myElevator_direction____d35 = INST_myElevator.METH_direction();
  INST_direction.METH_write(DEF_myElevator_direction____d35);
  INST_moving.METH_write(DEF_myElevator_moving____d36);
  INST_setFloor.METH_write((tUInt8)1u);
}

void MOD_mkRules::RL_set_floor()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  INST_myElevator.METH_setCurrentFloor(DEF_b__h388);
  INST_update.METH_write((tUInt8)0u);
  INST_setFloor.METH_write((tUInt8)0u);
}

void MOD_mkRules::RL_move_up()
{
  tUInt32 DEF_realFloor_PLUS_1___d48;
  tUInt8 DEF_move_up_timer_4_EQ_20___d45;
  tUInt32 DEF_IF_move_up_timer_4_EQ_20_5_THEN_0_ELSE_move_up_ETC___d47;
  tUInt32 DEF_b__h1184;
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_b__h1184 = INST_move_up_timer.METH_read();
  DEF_move_up_timer_4_EQ_20___d45 = DEF_b__h1184 == 20u;
  DEF_IF_move_up_timer_4_EQ_20_5_THEN_0_ELSE_move_up_ETC___d47 = DEF_move_up_timer_4_EQ_20___d45 ? 0u : DEF_b__h1184 + 1u;
  DEF_realFloor_PLUS_1___d48 = DEF_b__h388 + 1u;
  INST_move_up_timer.METH_write(DEF_IF_move_up_timer_4_EQ_20_5_THEN_0_ELSE_move_up_ETC___d47);
  if (DEF_move_up_timer_4_EQ_20___d45)
    INST_myElevator.METH_setCurrentFloor(DEF_realFloor_PLUS_1___d48);
  if (DEF_move_up_timer_4_EQ_20___d45)
    INST_realFloor.METH_write(DEF_realFloor_PLUS_1___d48);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_move_up_timer_4_EQ_20___d45)
      dollar_display(sim_hdl, this, "s", &__str_literal_6);
  INST_update.METH_write((tUInt8)1u);
}

void MOD_mkRules::RL_check_stop()
{
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_signed_realFloor___d14 = DEF_b__h388;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_realFloor___d14);
  INST_update.METH_write((tUInt8)1u);
}

void MOD_mkRules::RL_move_down()
{
  tUInt32 DEF_realFloor_MINUS_1___d59;
  tUInt8 DEF_move_down_timer_5_EQ_20___d56;
  tUInt32 DEF_IF_move_down_timer_5_EQ_20_6_THEN_0_ELSE_move__ETC___d58;
  tUInt32 DEF_b__h1455;
  DEF_b__h388 = INST_realFloor.METH_read();
  DEF_b__h1455 = INST_move_down_timer.METH_read();
  DEF_move_down_timer_5_EQ_20___d56 = DEF_b__h1455 == 20u;
  DEF_IF_move_down_timer_5_EQ_20_6_THEN_0_ELSE_move__ETC___d58 = DEF_move_down_timer_5_EQ_20___d56 ? 0u : DEF_b__h1455 + 1u;
  DEF_realFloor_MINUS_1___d59 = DEF_b__h388 - 1u;
  INST_move_down_timer.METH_write(DEF_IF_move_down_timer_5_EQ_20_6_THEN_0_ELSE_move__ETC___d58);
  if (DEF_move_down_timer_5_EQ_20___d56)
    INST_myElevator.METH_setCurrentFloor(DEF_realFloor_MINUS_1___d59);
  if (DEF_move_down_timer_5_EQ_20___d56)
    INST_realFloor.METH_write(DEF_realFloor_MINUS_1___d59);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_move_down_timer_5_EQ_20___d56)
      dollar_display(sim_hdl, this, "s", &__str_literal_7);
  INST_update.METH_write((tUInt8)1u);
}

void MOD_mkRules::RL_nothing()
{
  INST_update.METH_write((tUInt8)1u);
}


/* Methods */


/* Reset routines */

void MOD_mkRules::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_update.reset_RST(ARG_rst_in);
  INST_trace_step.reset_RST(ARG_rst_in);
  INST_step.reset_RST(ARG_rst_in);
  INST_setFloor.reset_RST(ARG_rst_in);
  INST_realFloor.reset_RST(ARG_rst_in);
  INST_myElevator.reset_RST_N(ARG_rst_in);
  INST_moving.reset_RST(ARG_rst_in);
  INST_move_up_timer.reset_RST(ARG_rst_in);
  INST_move_down_timer.reset_RST(ARG_rst_in);
  INST_direction.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkRules::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkRules::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_direction.dump_state(indent + 2u);
  INST_move_down_timer.dump_state(indent + 2u);
  INST_move_up_timer.dump_state(indent + 2u);
  INST_moving.dump_state(indent + 2u);
  INST_myElevator.dump_state(indent + 2u);
  INST_realFloor.dump_state(indent + 2u);
  INST_setFloor.dump_state(indent + 2u);
  INST_step.dump_state(indent + 2u);
  INST_trace_step.dump_state(indent + 2u);
  INST_update.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkRules::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 36u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_check_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_move_down", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_move_up", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_nothing", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_set_floor", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_step_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_step_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_step_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_step_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_update_state", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_check_stop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_move_down", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_move_up", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_nothing", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_set_floor", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_step_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_step_2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_step_3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_step_4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_update_state", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h388", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_realFloor___d14", 32u);
  num = INST_direction.dump_VCD_defs(num);
  num = INST_move_down_timer.dump_VCD_defs(num);
  num = INST_move_up_timer.dump_VCD_defs(num);
  num = INST_moving.dump_VCD_defs(num);
  num = INST_realFloor.dump_VCD_defs(num);
  num = INST_setFloor.dump_VCD_defs(num);
  num = INST_step.dump_VCD_defs(num);
  num = INST_trace_step.dump_VCD_defs(num);
  num = INST_update.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_myElevator.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkRules::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRules &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkRules::vcd_defs(tVCDDumpType dt, MOD_mkRules &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_check_stop) != DEF_CAN_FIRE_RL_check_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_check_stop, 1u);
	backing.DEF_CAN_FIRE_RL_check_stop = DEF_CAN_FIRE_RL_check_stop;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_finish) != DEF_CAN_FIRE_RL_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_finish, 1u);
	backing.DEF_CAN_FIRE_RL_finish = DEF_CAN_FIRE_RL_finish;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_move_down) != DEF_CAN_FIRE_RL_move_down)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_move_down, 1u);
	backing.DEF_CAN_FIRE_RL_move_down = DEF_CAN_FIRE_RL_move_down;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_move_up) != DEF_CAN_FIRE_RL_move_up)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_move_up, 1u);
	backing.DEF_CAN_FIRE_RL_move_up = DEF_CAN_FIRE_RL_move_up;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_nothing) != DEF_CAN_FIRE_RL_nothing)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_nothing, 1u);
	backing.DEF_CAN_FIRE_RL_nothing = DEF_CAN_FIRE_RL_nothing;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_set_floor) != DEF_CAN_FIRE_RL_set_floor)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_set_floor, 1u);
	backing.DEF_CAN_FIRE_RL_set_floor = DEF_CAN_FIRE_RL_set_floor;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_start) != DEF_CAN_FIRE_RL_start)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_start, 1u);
	backing.DEF_CAN_FIRE_RL_start = DEF_CAN_FIRE_RL_start;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_step_1) != DEF_CAN_FIRE_RL_step_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_step_1, 1u);
	backing.DEF_CAN_FIRE_RL_step_1 = DEF_CAN_FIRE_RL_step_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_step_2) != DEF_CAN_FIRE_RL_step_2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_step_2, 1u);
	backing.DEF_CAN_FIRE_RL_step_2 = DEF_CAN_FIRE_RL_step_2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_step_3) != DEF_CAN_FIRE_RL_step_3)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_step_3, 1u);
	backing.DEF_CAN_FIRE_RL_step_3 = DEF_CAN_FIRE_RL_step_3;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_step_4) != DEF_CAN_FIRE_RL_step_4)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_step_4, 1u);
	backing.DEF_CAN_FIRE_RL_step_4 = DEF_CAN_FIRE_RL_step_4;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_update_state) != DEF_CAN_FIRE_RL_update_state)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_update_state, 1u);
	backing.DEF_CAN_FIRE_RL_update_state = DEF_CAN_FIRE_RL_update_state;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_check_stop) != DEF_WILL_FIRE_RL_check_stop)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_check_stop, 1u);
	backing.DEF_WILL_FIRE_RL_check_stop = DEF_WILL_FIRE_RL_check_stop;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_finish) != DEF_WILL_FIRE_RL_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_finish, 1u);
	backing.DEF_WILL_FIRE_RL_finish = DEF_WILL_FIRE_RL_finish;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_move_down) != DEF_WILL_FIRE_RL_move_down)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_move_down, 1u);
	backing.DEF_WILL_FIRE_RL_move_down = DEF_WILL_FIRE_RL_move_down;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_move_up) != DEF_WILL_FIRE_RL_move_up)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_move_up, 1u);
	backing.DEF_WILL_FIRE_RL_move_up = DEF_WILL_FIRE_RL_move_up;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_nothing) != DEF_WILL_FIRE_RL_nothing)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_nothing, 1u);
	backing.DEF_WILL_FIRE_RL_nothing = DEF_WILL_FIRE_RL_nothing;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_set_floor) != DEF_WILL_FIRE_RL_set_floor)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_set_floor, 1u);
	backing.DEF_WILL_FIRE_RL_set_floor = DEF_WILL_FIRE_RL_set_floor;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_start) != DEF_WILL_FIRE_RL_start)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_start, 1u);
	backing.DEF_WILL_FIRE_RL_start = DEF_WILL_FIRE_RL_start;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_step_1) != DEF_WILL_FIRE_RL_step_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_step_1, 1u);
	backing.DEF_WILL_FIRE_RL_step_1 = DEF_WILL_FIRE_RL_step_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_step_2) != DEF_WILL_FIRE_RL_step_2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_step_2, 1u);
	backing.DEF_WILL_FIRE_RL_step_2 = DEF_WILL_FIRE_RL_step_2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_step_3) != DEF_WILL_FIRE_RL_step_3)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_step_3, 1u);
	backing.DEF_WILL_FIRE_RL_step_3 = DEF_WILL_FIRE_RL_step_3;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_step_4) != DEF_WILL_FIRE_RL_step_4)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_step_4, 1u);
	backing.DEF_WILL_FIRE_RL_step_4 = DEF_WILL_FIRE_RL_step_4;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_update_state) != DEF_WILL_FIRE_RL_update_state)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_update_state, 1u);
	backing.DEF_WILL_FIRE_RL_update_state = DEF_WILL_FIRE_RL_update_state;
      }
      ++num;
      if ((backing.DEF_b__h388) != DEF_b__h388)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h388, 32u);
	backing.DEF_b__h388 = DEF_b__h388;
      }
      ++num;
      if ((backing.DEF_signed_realFloor___d14) != DEF_signed_realFloor___d14)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_realFloor___d14, 32u);
	backing.DEF_signed_realFloor___d14 = DEF_signed_realFloor___d14;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_check_stop, 1u);
      backing.DEF_CAN_FIRE_RL_check_stop = DEF_CAN_FIRE_RL_check_stop;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_finish, 1u);
      backing.DEF_CAN_FIRE_RL_finish = DEF_CAN_FIRE_RL_finish;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_move_down, 1u);
      backing.DEF_CAN_FIRE_RL_move_down = DEF_CAN_FIRE_RL_move_down;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_move_up, 1u);
      backing.DEF_CAN_FIRE_RL_move_up = DEF_CAN_FIRE_RL_move_up;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_nothing, 1u);
      backing.DEF_CAN_FIRE_RL_nothing = DEF_CAN_FIRE_RL_nothing;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_set_floor, 1u);
      backing.DEF_CAN_FIRE_RL_set_floor = DEF_CAN_FIRE_RL_set_floor;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_start, 1u);
      backing.DEF_CAN_FIRE_RL_start = DEF_CAN_FIRE_RL_start;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_step_1, 1u);
      backing.DEF_CAN_FIRE_RL_step_1 = DEF_CAN_FIRE_RL_step_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_step_2, 1u);
      backing.DEF_CAN_FIRE_RL_step_2 = DEF_CAN_FIRE_RL_step_2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_step_3, 1u);
      backing.DEF_CAN_FIRE_RL_step_3 = DEF_CAN_FIRE_RL_step_3;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_step_4, 1u);
      backing.DEF_CAN_FIRE_RL_step_4 = DEF_CAN_FIRE_RL_step_4;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_update_state, 1u);
      backing.DEF_CAN_FIRE_RL_update_state = DEF_CAN_FIRE_RL_update_state;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_check_stop, 1u);
      backing.DEF_WILL_FIRE_RL_check_stop = DEF_WILL_FIRE_RL_check_stop;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_finish, 1u);
      backing.DEF_WILL_FIRE_RL_finish = DEF_WILL_FIRE_RL_finish;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_move_down, 1u);
      backing.DEF_WILL_FIRE_RL_move_down = DEF_WILL_FIRE_RL_move_down;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_move_up, 1u);
      backing.DEF_WILL_FIRE_RL_move_up = DEF_WILL_FIRE_RL_move_up;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_nothing, 1u);
      backing.DEF_WILL_FIRE_RL_nothing = DEF_WILL_FIRE_RL_nothing;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_set_floor, 1u);
      backing.DEF_WILL_FIRE_RL_set_floor = DEF_WILL_FIRE_RL_set_floor;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_start, 1u);
      backing.DEF_WILL_FIRE_RL_start = DEF_WILL_FIRE_RL_start;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_step_1, 1u);
      backing.DEF_WILL_FIRE_RL_step_1 = DEF_WILL_FIRE_RL_step_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_step_2, 1u);
      backing.DEF_WILL_FIRE_RL_step_2 = DEF_WILL_FIRE_RL_step_2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_step_3, 1u);
      backing.DEF_WILL_FIRE_RL_step_3 = DEF_WILL_FIRE_RL_step_3;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_step_4, 1u);
      backing.DEF_WILL_FIRE_RL_step_4 = DEF_WILL_FIRE_RL_step_4;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_update_state, 1u);
      backing.DEF_WILL_FIRE_RL_update_state = DEF_WILL_FIRE_RL_update_state;
      vcd_write_val(sim_hdl, num++, DEF_b__h388, 32u);
      backing.DEF_b__h388 = DEF_b__h388;
      vcd_write_val(sim_hdl, num++, DEF_signed_realFloor___d14, 32u);
      backing.DEF_signed_realFloor___d14 = DEF_signed_realFloor___d14;
    }
}

void MOD_mkRules::vcd_prims(tVCDDumpType dt, MOD_mkRules &backing)
{
  INST_direction.dump_VCD(dt, backing.INST_direction);
  INST_move_down_timer.dump_VCD(dt, backing.INST_move_down_timer);
  INST_move_up_timer.dump_VCD(dt, backing.INST_move_up_timer);
  INST_moving.dump_VCD(dt, backing.INST_moving);
  INST_realFloor.dump_VCD(dt, backing.INST_realFloor);
  INST_setFloor.dump_VCD(dt, backing.INST_setFloor);
  INST_step.dump_VCD(dt, backing.INST_step);
  INST_trace_step.dump_VCD(dt, backing.INST_trace_step);
  INST_update.dump_VCD(dt, backing.INST_update);
}

void MOD_mkRules::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkRules &backing)
{
  INST_myElevator.dump_VCD(dt, levels, backing.INST_myElevator);
}
