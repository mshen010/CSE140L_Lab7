/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Mar  7 17:39:05 PST 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkElevator.h"


/* Constructor */
MOD_mkElevator::MOD_mkElevator(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_currentFloor(simHdl, "currentFloor", this, 32u, 0u, (tUInt8)0u),
    INST_direction_reg(simHdl, "direction_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_floor_des(simHdl, "floor_des", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_floor_down_pressed(simHdl, "floor_down_pressed", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_floor_up_pressed(simHdl, "floor_up_pressed", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_moving_reg(simHdl, "moving_reg", this, 1u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_floor_0_up_request = false;
  PORT_EN_floor_1_up_request = false;
  PORT_EN_floor_1_down_request = false;
  PORT_EN_floor_2_down_request = false;
  PORT_EN_floor_0_des_request = false;
  PORT_EN_floor_1_des_request = false;
  PORT_EN_floor_2_des_request = false;
  PORT_EN_setCurrentFloor = false;
  PORT_setCurrentFloor_floor = 0u;
  PORT_RDY_floor_0_up_request = false;
  PORT_RDY_floor_1_up_request = false;
  PORT_RDY_floor_1_down_request = false;
  PORT_RDY_floor_2_down_request = false;
  PORT_RDY_floor_0_des_request = false;
  PORT_RDY_floor_1_des_request = false;
  PORT_RDY_floor_2_des_request = false;
  PORT_RDY_setCurrentFloor = false;
  PORT_moving = false;
  PORT_RDY_moving = false;
  PORT_direction = false;
  PORT_RDY_direction = false;
  symbol_count = 73u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkElevator::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_direction", SYM_DEF, &DEF_CAN_FIRE_direction, 1u);
  init_symbol(&symbols[1u],
	      "CAN_FIRE_floor_0_des_request",
	      SYM_DEF,
	      &DEF_CAN_FIRE_floor_0_des_request,
	      1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_floor_0_up_request",
	      SYM_DEF,
	      &DEF_CAN_FIRE_floor_0_up_request,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_floor_1_des_request",
	      SYM_DEF,
	      &DEF_CAN_FIRE_floor_1_des_request,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_floor_1_down_request",
	      SYM_DEF,
	      &DEF_CAN_FIRE_floor_1_down_request,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_floor_1_up_request",
	      SYM_DEF,
	      &DEF_CAN_FIRE_floor_1_up_request,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_floor_2_des_request",
	      SYM_DEF,
	      &DEF_CAN_FIRE_floor_2_des_request,
	      1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_floor_2_down_request",
	      SYM_DEF,
	      &DEF_CAN_FIRE_floor_2_down_request,
	      1u);
  init_symbol(&symbols[8u], "CAN_FIRE_moving", SYM_DEF, &DEF_CAN_FIRE_moving, 1u);
  init_symbol(&symbols[9u],
	      "CAN_FIRE_RL_changeDirection",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_changeDirection,
	      1u);
  init_symbol(&symbols[10u], "CAN_FIRE_RL_goingDown", SYM_DEF, &DEF_CAN_FIRE_RL_goingDown, 1u);
  init_symbol(&symbols[11u], "CAN_FIRE_RL_goingUp", SYM_DEF, &DEF_CAN_FIRE_RL_goingUp, 1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_RL_stopGoingDown",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_stopGoingDown,
	      1u);
  init_symbol(&symbols[13u], "CAN_FIRE_RL_stopGoingUp", SYM_DEF, &DEF_CAN_FIRE_RL_stopGoingUp, 1u);
  init_symbol(&symbols[14u], "CAN_FIRE_setCurrentFloor", SYM_DEF, &DEF_CAN_FIRE_setCurrentFloor, 1u);
  init_symbol(&symbols[15u], "currentFloor", SYM_MODULE, &INST_currentFloor);
  init_symbol(&symbols[16u], "direction", SYM_PORT, &PORT_direction, 1u);
  init_symbol(&symbols[17u], "direction_reg", SYM_MODULE, &INST_direction_reg);
  init_symbol(&symbols[18u], "direction_reg__h12570", SYM_DEF, &DEF_direction_reg__h12570, 1u);
  init_symbol(&symbols[19u], "EN_floor_0_des_request", SYM_PORT, &PORT_EN_floor_0_des_request, 1u);
  init_symbol(&symbols[20u], "EN_floor_0_up_request", SYM_PORT, &PORT_EN_floor_0_up_request, 1u);
  init_symbol(&symbols[21u], "EN_floor_1_des_request", SYM_PORT, &PORT_EN_floor_1_des_request, 1u);
  init_symbol(&symbols[22u], "EN_floor_1_down_request", SYM_PORT, &PORT_EN_floor_1_down_request, 1u);
  init_symbol(&symbols[23u], "EN_floor_1_up_request", SYM_PORT, &PORT_EN_floor_1_up_request, 1u);
  init_symbol(&symbols[24u], "EN_floor_2_des_request", SYM_PORT, &PORT_EN_floor_2_des_request, 1u);
  init_symbol(&symbols[25u], "EN_floor_2_down_request", SYM_PORT, &PORT_EN_floor_2_down_request, 1u);
  init_symbol(&symbols[26u], "EN_setCurrentFloor", SYM_PORT, &PORT_EN_setCurrentFloor, 1u);
  init_symbol(&symbols[27u], "floor_des", SYM_MODULE, &INST_floor_des);
  init_symbol(&symbols[28u], "floor_des__h1624", SYM_DEF, &DEF_floor_des__h1624, 3u);
  init_symbol(&symbols[29u], "floor_des_BIT_0___h1625", SYM_DEF, &DEF_floor_des_BIT_0___h1625, 1u);
  init_symbol(&symbols[30u], "floor_des_BIT_1___h1547", SYM_DEF, &DEF_floor_des_BIT_1___h1547, 1u);
  init_symbol(&symbols[31u], "floor_des_BIT_2___h1392", SYM_DEF, &DEF_floor_des_BIT_2___h1392, 1u);
  init_symbol(&symbols[32u], "floor_down_pressed", SYM_MODULE, &INST_floor_down_pressed);
  init_symbol(&symbols[33u],
	      "floor_down_pressed__h7759",
	      SYM_DEF,
	      &DEF_floor_down_pressed__h7759,
	      3u);
  init_symbol(&symbols[34u],
	      "floor_down_pressed_BIT_1___h1584",
	      SYM_DEF,
	      &DEF_floor_down_pressed_BIT_1___h1584,
	      1u);
  init_symbol(&symbols[35u],
	      "floor_down_pressed_BIT_2___h1506",
	      SYM_DEF,
	      &DEF_floor_down_pressed_BIT_2___h1506,
	      1u);
  init_symbol(&symbols[36u], "floor_up_pressed", SYM_MODULE, &INST_floor_up_pressed);
  init_symbol(&symbols[37u], "floor_up_pressed__h7356", SYM_DEF, &DEF_floor_up_pressed__h7356, 3u);
  init_symbol(&symbols[38u],
	      "floor_up_pressed_BIT_0___h1739",
	      SYM_DEF,
	      &DEF_floor_up_pressed_BIT_0___h1739,
	      1u);
  init_symbol(&symbols[39u],
	      "floor_up_pressed_BIT_1___h1780",
	      SYM_DEF,
	      &DEF_floor_up_pressed_BIT_1___h1780,
	      1u);
  init_symbol(&symbols[40u], "moving", SYM_PORT, &PORT_moving, 1u);
  init_symbol(&symbols[41u], "moving_reg", SYM_MODULE, &INST_moving_reg);
  init_symbol(&symbols[42u], "moving_reg__h10758", SYM_DEF, &DEF_moving_reg__h10758, 1u);
  init_symbol(&symbols[43u], "RDY_direction", SYM_PORT, &PORT_RDY_direction, 1u);
  init_symbol(&symbols[44u], "RDY_floor_0_des_request", SYM_PORT, &PORT_RDY_floor_0_des_request, 1u);
  init_symbol(&symbols[45u], "RDY_floor_0_up_request", SYM_PORT, &PORT_RDY_floor_0_up_request, 1u);
  init_symbol(&symbols[46u], "RDY_floor_1_des_request", SYM_PORT, &PORT_RDY_floor_1_des_request, 1u);
  init_symbol(&symbols[47u],
	      "RDY_floor_1_down_request",
	      SYM_PORT,
	      &PORT_RDY_floor_1_down_request,
	      1u);
  init_symbol(&symbols[48u], "RDY_floor_1_up_request", SYM_PORT, &PORT_RDY_floor_1_up_request, 1u);
  init_symbol(&symbols[49u], "RDY_floor_2_des_request", SYM_PORT, &PORT_RDY_floor_2_des_request, 1u);
  init_symbol(&symbols[50u],
	      "RDY_floor_2_down_request",
	      SYM_PORT,
	      &PORT_RDY_floor_2_down_request,
	      1u);
  init_symbol(&symbols[51u], "RDY_moving", SYM_PORT, &PORT_RDY_moving, 1u);
  init_symbol(&symbols[52u], "RDY_setCurrentFloor", SYM_PORT, &PORT_RDY_setCurrentFloor, 1u);
  init_symbol(&symbols[53u], "RL_changeDirection", SYM_RULE);
  init_symbol(&symbols[54u], "RL_goingDown", SYM_RULE);
  init_symbol(&symbols[55u], "RL_goingUp", SYM_RULE);
  init_symbol(&symbols[56u], "RL_stopGoingDown", SYM_RULE);
  init_symbol(&symbols[57u], "RL_stopGoingUp", SYM_RULE);
  init_symbol(&symbols[58u], "setCurrentFloor_floor", SYM_PORT, &PORT_setCurrentFloor_floor, 32u);
  init_symbol(&symbols[59u],
	      "WILL_FIRE_floor_0_des_request",
	      SYM_DEF,
	      &DEF_WILL_FIRE_floor_0_des_request,
	      1u);
  init_symbol(&symbols[60u],
	      "WILL_FIRE_floor_0_up_request",
	      SYM_DEF,
	      &DEF_WILL_FIRE_floor_0_up_request,
	      1u);
  init_symbol(&symbols[61u],
	      "WILL_FIRE_floor_1_des_request",
	      SYM_DEF,
	      &DEF_WILL_FIRE_floor_1_des_request,
	      1u);
  init_symbol(&symbols[62u],
	      "WILL_FIRE_floor_1_down_request",
	      SYM_DEF,
	      &DEF_WILL_FIRE_floor_1_down_request,
	      1u);
  init_symbol(&symbols[63u],
	      "WILL_FIRE_floor_1_up_request",
	      SYM_DEF,
	      &DEF_WILL_FIRE_floor_1_up_request,
	      1u);
  init_symbol(&symbols[64u],
	      "WILL_FIRE_floor_2_des_request",
	      SYM_DEF,
	      &DEF_WILL_FIRE_floor_2_des_request,
	      1u);
  init_symbol(&symbols[65u],
	      "WILL_FIRE_floor_2_down_request",
	      SYM_DEF,
	      &DEF_WILL_FIRE_floor_2_down_request,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_RL_changeDirection",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_changeDirection,
	      1u);
  init_symbol(&symbols[67u], "WILL_FIRE_RL_goingDown", SYM_DEF, &DEF_WILL_FIRE_RL_goingDown, 1u);
  init_symbol(&symbols[68u], "WILL_FIRE_RL_goingUp", SYM_DEF, &DEF_WILL_FIRE_RL_goingUp, 1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_stopGoingDown",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_stopGoingDown,
	      1u);
  init_symbol(&symbols[70u], "WILL_FIRE_RL_stopGoingUp", SYM_DEF, &DEF_WILL_FIRE_RL_stopGoingUp, 1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_setCurrentFloor",
	      SYM_DEF,
	      &DEF_WILL_FIRE_setCurrentFloor,
	      1u);
  init_symbol(&symbols[72u], "x__h10658", SYM_DEF, &DEF_x__h10658, 32u);
}


/* Rule actions */

void MOD_mkElevator::RL_goingUp()
{
  INST_moving_reg.METH_write((tUInt8)0u);
}

void MOD_mkElevator::RL_goingDown()
{
  INST_moving_reg.METH_write((tUInt8)0u);
}

void MOD_mkElevator::RL_stopGoingUp()
{
  DEF_x__h10658 = INST_currentFloor.METH_read();
  DEF_floor_des__h1624 = INST_floor_des.METH_read();
  DEF_floor_des_BIT_0___h1625 = (tUInt8)((tUInt8)1u & DEF_floor_des__h1624);
  DEF_floor_des_BIT_1___h1547 = (tUInt8)((tUInt8)1u & (DEF_floor_des__h1624 >> 1u));
  DEF_floor_des_BIT_2___h1392 = (tUInt8)(DEF_floor_des__h1624 >> 2u);
  DEF_floor_down_pressed__h7759 = INST_floor_down_pressed.METH_read();
  DEF_floor_down_pressed_BIT_0___h7760 = (tUInt8)((tUInt8)1u & DEF_floor_down_pressed__h7759);
  DEF_floor_down_pressed_BIT_1___h1584 = (tUInt8)((tUInt8)1u & (DEF_floor_down_pressed__h7759 >> 1u));
  DEF_floor_down_pressed_BIT_2___h1506 = (tUInt8)(DEF_floor_down_pressed__h7759 >> 2u);
  DEF_floor_up_pressed__h7356 = INST_floor_up_pressed.METH_read();
  DEF_floor_up_pressed_BIT_0___h1739 = (tUInt8)((tUInt8)1u & DEF_floor_up_pressed__h7356);
  DEF_floor_up_pressed_BIT_1___h1780 = (tUInt8)((tUInt8)1u & (DEF_floor_up_pressed__h7356 >> 1u));
  DEF_floor_up_pressed_BIT_2___h7357 = (tUInt8)(DEF_floor_up_pressed__h7356 >> 2u);
  DEF_NOT_currentFloor_EQ_0_9___d64 = !(DEF_x__h10658 == 0u);
  DEF_NOT_currentFloor_EQ_1_4___d62 = !(DEF_x__h10658 == 1u);
  DEF_NOT_currentFloor_EQ_2___d59 = !(DEF_x__h10658 == 2u);
  DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75 = (tUInt8)7u & ((((DEF_NOT_currentFloor_EQ_2___d59 && DEF_floor_des_BIT_2___h1392) << 2u) | ((DEF_NOT_currentFloor_EQ_1_4___d62 && DEF_floor_des_BIT_1___h1547) << 1u)) | (DEF_NOT_currentFloor_EQ_0_9___d64 && DEF_floor_des_BIT_0___h1625));
  DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66 = (tUInt8)7u & ((((DEF_NOT_currentFloor_EQ_2___d59 && DEF_floor_up_pressed_BIT_2___h7357) << 2u) | ((DEF_NOT_currentFloor_EQ_1_4___d62 && DEF_floor_up_pressed_BIT_1___h1780) << 1u)) | (DEF_NOT_currentFloor_EQ_0_9___d64 && DEF_floor_up_pressed_BIT_0___h1739));
  DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71 = (tUInt8)7u & ((((DEF_NOT_currentFloor_EQ_2___d59 && DEF_floor_down_pressed_BIT_2___h1506) << 2u) | ((DEF_NOT_currentFloor_EQ_1_4___d62 && DEF_floor_down_pressed_BIT_1___h1584) << 1u)) | (DEF_NOT_currentFloor_EQ_0_9___d64 && DEF_floor_down_pressed_BIT_0___h7760));
  INST_moving_reg.METH_write((tUInt8)1u);
  INST_floor_up_pressed.METH_write(DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66);
  INST_floor_down_pressed.METH_write(DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71);
  INST_floor_des.METH_write(DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75);
}

void MOD_mkElevator::RL_stopGoingDown()
{
  DEF_x__h10658 = INST_currentFloor.METH_read();
  DEF_floor_des__h1624 = INST_floor_des.METH_read();
  DEF_floor_des_BIT_0___h1625 = (tUInt8)((tUInt8)1u & DEF_floor_des__h1624);
  DEF_floor_des_BIT_1___h1547 = (tUInt8)((tUInt8)1u & (DEF_floor_des__h1624 >> 1u));
  DEF_floor_des_BIT_2___h1392 = (tUInt8)(DEF_floor_des__h1624 >> 2u);
  DEF_floor_down_pressed__h7759 = INST_floor_down_pressed.METH_read();
  DEF_floor_down_pressed_BIT_0___h7760 = (tUInt8)((tUInt8)1u & DEF_floor_down_pressed__h7759);
  DEF_floor_down_pressed_BIT_1___h1584 = (tUInt8)((tUInt8)1u & (DEF_floor_down_pressed__h7759 >> 1u));
  DEF_floor_down_pressed_BIT_2___h1506 = (tUInt8)(DEF_floor_down_pressed__h7759 >> 2u);
  DEF_floor_up_pressed__h7356 = INST_floor_up_pressed.METH_read();
  DEF_floor_up_pressed_BIT_0___h1739 = (tUInt8)((tUInt8)1u & DEF_floor_up_pressed__h7356);
  DEF_floor_up_pressed_BIT_1___h1780 = (tUInt8)((tUInt8)1u & (DEF_floor_up_pressed__h7356 >> 1u));
  DEF_floor_up_pressed_BIT_2___h7357 = (tUInt8)(DEF_floor_up_pressed__h7356 >> 2u);
  DEF_NOT_currentFloor_EQ_0_9___d64 = !(DEF_x__h10658 == 0u);
  DEF_NOT_currentFloor_EQ_1_4___d62 = !(DEF_x__h10658 == 1u);
  DEF_NOT_currentFloor_EQ_2___d59 = !(DEF_x__h10658 == 2u);
  DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75 = (tUInt8)7u & ((((DEF_NOT_currentFloor_EQ_2___d59 && DEF_floor_des_BIT_2___h1392) << 2u) | ((DEF_NOT_currentFloor_EQ_1_4___d62 && DEF_floor_des_BIT_1___h1547) << 1u)) | (DEF_NOT_currentFloor_EQ_0_9___d64 && DEF_floor_des_BIT_0___h1625));
  DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66 = (tUInt8)7u & ((((DEF_NOT_currentFloor_EQ_2___d59 && DEF_floor_up_pressed_BIT_2___h7357) << 2u) | ((DEF_NOT_currentFloor_EQ_1_4___d62 && DEF_floor_up_pressed_BIT_1___h1780) << 1u)) | (DEF_NOT_currentFloor_EQ_0_9___d64 && DEF_floor_up_pressed_BIT_0___h1739));
  DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71 = (tUInt8)7u & ((((DEF_NOT_currentFloor_EQ_2___d59 && DEF_floor_down_pressed_BIT_2___h1506) << 2u) | ((DEF_NOT_currentFloor_EQ_1_4___d62 && DEF_floor_down_pressed_BIT_1___h1584) << 1u)) | (DEF_NOT_currentFloor_EQ_0_9___d64 && DEF_floor_down_pressed_BIT_0___h7760));
  INST_moving_reg.METH_write((tUInt8)1u);
  INST_floor_up_pressed.METH_write(DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66);
  INST_floor_down_pressed.METH_write(DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71);
  INST_floor_des.METH_write(DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75);
}

void MOD_mkElevator::RL_changeDirection()
{
  DEF_direction_reg__h12570 = INST_direction_reg.METH_read();
  DEF_NOT_direction_reg___d2 = !DEF_direction_reg__h12570;
  INST_direction_reg.METH_write(DEF_NOT_direction_reg___d2);
}


/* Methods */

void MOD_mkElevator::METH_floor_0_up_request()
{
  tUInt8 DEF_floor_up_pressed_6_BITS_2_TO_1_0_CONCAT_1___d81;
  PORT_EN_floor_0_up_request = (tUInt8)1u;
  DEF_WILL_FIRE_floor_0_up_request = (tUInt8)1u;
  DEF_floor_up_pressed__h7356 = INST_floor_up_pressed.METH_read();
  DEF_floor_up_pressed_6_BITS_2_TO_1_0_CONCAT_1___d81 = (tUInt8)7u & ((((tUInt8)(DEF_floor_up_pressed__h7356 >> 1u)) << 1u) | (tUInt8)1u);
  INST_floor_up_pressed.METH_write(DEF_floor_up_pressed_6_BITS_2_TO_1_0_CONCAT_1___d81);
}

tUInt8 MOD_mkElevator::METH_RDY_floor_0_up_request()
{
  DEF_CAN_FIRE_floor_0_up_request = (tUInt8)1u;
  PORT_RDY_floor_0_up_request = DEF_CAN_FIRE_floor_0_up_request;
  return PORT_RDY_floor_0_up_request;
}

void MOD_mkElevator::METH_floor_1_up_request()
{
  tUInt8 DEF_floor_up_pressed_6_BIT_2_0_CONCAT_1_CONCAT_flo_ETC___d82;
  PORT_EN_floor_1_up_request = (tUInt8)1u;
  DEF_WILL_FIRE_floor_1_up_request = (tUInt8)1u;
  DEF_floor_up_pressed__h7356 = INST_floor_up_pressed.METH_read();
  DEF_floor_up_pressed_BIT_0___h1739 = (tUInt8)((tUInt8)1u & DEF_floor_up_pressed__h7356);
  DEF_floor_up_pressed_BIT_2___h7357 = (tUInt8)(DEF_floor_up_pressed__h7356 >> 2u);
  DEF_floor_up_pressed_6_BIT_2_0_CONCAT_1_CONCAT_flo_ETC___d82 = (tUInt8)7u & (((DEF_floor_up_pressed_BIT_2___h7357 << 2u) | ((tUInt8)1u << 1u)) | DEF_floor_up_pressed_BIT_0___h1739);
  INST_floor_up_pressed.METH_write(DEF_floor_up_pressed_6_BIT_2_0_CONCAT_1_CONCAT_flo_ETC___d82);
}

tUInt8 MOD_mkElevator::METH_RDY_floor_1_up_request()
{
  DEF_CAN_FIRE_floor_1_up_request = (tUInt8)1u;
  PORT_RDY_floor_1_up_request = DEF_CAN_FIRE_floor_1_up_request;
  return PORT_RDY_floor_1_up_request;
}

void MOD_mkElevator::METH_floor_1_down_request()
{
  tUInt8 DEF_floor_down_pressed_BIT_2_0_CONCAT_1_CONCAT_flo_ETC___d83;
  PORT_EN_floor_1_down_request = (tUInt8)1u;
  DEF_WILL_FIRE_floor_1_down_request = (tUInt8)1u;
  DEF_floor_down_pressed__h7759 = INST_floor_down_pressed.METH_read();
  DEF_floor_down_pressed_BIT_0___h7760 = (tUInt8)((tUInt8)1u & DEF_floor_down_pressed__h7759);
  DEF_floor_down_pressed_BIT_2___h1506 = (tUInt8)(DEF_floor_down_pressed__h7759 >> 2u);
  DEF_floor_down_pressed_BIT_2_0_CONCAT_1_CONCAT_flo_ETC___d83 = (tUInt8)7u & (((DEF_floor_down_pressed_BIT_2___h1506 << 2u) | ((tUInt8)1u << 1u)) | DEF_floor_down_pressed_BIT_0___h7760);
  INST_floor_down_pressed.METH_write(DEF_floor_down_pressed_BIT_2_0_CONCAT_1_CONCAT_flo_ETC___d83);
}

tUInt8 MOD_mkElevator::METH_RDY_floor_1_down_request()
{
  DEF_CAN_FIRE_floor_1_down_request = (tUInt8)1u;
  PORT_RDY_floor_1_down_request = DEF_CAN_FIRE_floor_1_down_request;
  return PORT_RDY_floor_1_down_request;
}

void MOD_mkElevator::METH_floor_2_down_request()
{
  tUInt8 DEF__1_CONCAT_floor_down_pressed_BITS_1_TO_0_4___d85;
  PORT_EN_floor_2_down_request = (tUInt8)1u;
  DEF_WILL_FIRE_floor_2_down_request = (tUInt8)1u;
  DEF_floor_down_pressed__h7759 = INST_floor_down_pressed.METH_read();
  DEF__1_CONCAT_floor_down_pressed_BITS_1_TO_0_4___d85 = (tUInt8)7u & (((tUInt8)1u << 2u) | (tUInt8)((tUInt8)3u & DEF_floor_down_pressed__h7759));
  INST_floor_down_pressed.METH_write(DEF__1_CONCAT_floor_down_pressed_BITS_1_TO_0_4___d85);
}

tUInt8 MOD_mkElevator::METH_RDY_floor_2_down_request()
{
  DEF_CAN_FIRE_floor_2_down_request = (tUInt8)1u;
  PORT_RDY_floor_2_down_request = DEF_CAN_FIRE_floor_2_down_request;
  return PORT_RDY_floor_2_down_request;
}

void MOD_mkElevator::METH_floor_0_des_request()
{
  tUInt8 DEF_floor_des_BITS_2_TO_1_6_CONCAT_1___d87;
  PORT_EN_floor_0_des_request = (tUInt8)1u;
  DEF_WILL_FIRE_floor_0_des_request = (tUInt8)1u;
  DEF_floor_des__h1624 = INST_floor_des.METH_read();
  DEF_floor_des_BITS_2_TO_1_6_CONCAT_1___d87 = (tUInt8)7u & ((((tUInt8)(DEF_floor_des__h1624 >> 1u)) << 1u) | (tUInt8)1u);
  INST_floor_des.METH_write(DEF_floor_des_BITS_2_TO_1_6_CONCAT_1___d87);
}

tUInt8 MOD_mkElevator::METH_RDY_floor_0_des_request()
{
  DEF_CAN_FIRE_floor_0_des_request = (tUInt8)1u;
  PORT_RDY_floor_0_des_request = DEF_CAN_FIRE_floor_0_des_request;
  return PORT_RDY_floor_0_des_request;
}

void MOD_mkElevator::METH_floor_1_des_request()
{
  tUInt8 DEF_floor_des_BIT_2_CONCAT_1_CONCAT_floor_des_BIT_0_5___d88;
  PORT_EN_floor_1_des_request = (tUInt8)1u;
  DEF_WILL_FIRE_floor_1_des_request = (tUInt8)1u;
  DEF_floor_des__h1624 = INST_floor_des.METH_read();
  DEF_floor_des_BIT_0___h1625 = (tUInt8)((tUInt8)1u & DEF_floor_des__h1624);
  DEF_floor_des_BIT_2___h1392 = (tUInt8)(DEF_floor_des__h1624 >> 2u);
  DEF_floor_des_BIT_2_CONCAT_1_CONCAT_floor_des_BIT_0_5___d88 = (tUInt8)7u & (((DEF_floor_des_BIT_2___h1392 << 2u) | ((tUInt8)1u << 1u)) | DEF_floor_des_BIT_0___h1625);
  INST_floor_des.METH_write(DEF_floor_des_BIT_2_CONCAT_1_CONCAT_floor_des_BIT_0_5___d88);
}

tUInt8 MOD_mkElevator::METH_RDY_floor_1_des_request()
{
  DEF_CAN_FIRE_floor_1_des_request = (tUInt8)1u;
  PORT_RDY_floor_1_des_request = DEF_CAN_FIRE_floor_1_des_request;
  return PORT_RDY_floor_1_des_request;
}

void MOD_mkElevator::METH_floor_2_des_request()
{
  tUInt8 DEF__1_CONCAT_floor_des_BITS_1_TO_0_9___d90;
  PORT_EN_floor_2_des_request = (tUInt8)1u;
  DEF_WILL_FIRE_floor_2_des_request = (tUInt8)1u;
  DEF_floor_des__h1624 = INST_floor_des.METH_read();
  DEF__1_CONCAT_floor_des_BITS_1_TO_0_9___d90 = (tUInt8)7u & (((tUInt8)1u << 2u) | (tUInt8)((tUInt8)3u & DEF_floor_des__h1624));
  INST_floor_des.METH_write(DEF__1_CONCAT_floor_des_BITS_1_TO_0_9___d90);
}

tUInt8 MOD_mkElevator::METH_RDY_floor_2_des_request()
{
  DEF_CAN_FIRE_floor_2_des_request = (tUInt8)1u;
  PORT_RDY_floor_2_des_request = DEF_CAN_FIRE_floor_2_des_request;
  return PORT_RDY_floor_2_des_request;
}

void MOD_mkElevator::METH_setCurrentFloor(tUInt32 ARG_setCurrentFloor_floor)
{
  PORT_EN_setCurrentFloor = (tUInt8)1u;
  DEF_WILL_FIRE_setCurrentFloor = (tUInt8)1u;
  PORT_setCurrentFloor_floor = ARG_setCurrentFloor_floor;
  INST_currentFloor.METH_write(ARG_setCurrentFloor_floor);
}

tUInt8 MOD_mkElevator::METH_RDY_setCurrentFloor()
{
  DEF_CAN_FIRE_setCurrentFloor = (tUInt8)1u;
  PORT_RDY_setCurrentFloor = DEF_CAN_FIRE_setCurrentFloor;
  return PORT_RDY_setCurrentFloor;
}

tUInt8 MOD_mkElevator::METH_moving()
{
  DEF_moving_reg__h10758 = INST_moving_reg.METH_read();
  PORT_moving = DEF_moving_reg__h10758;
  return PORT_moving;
}

tUInt8 MOD_mkElevator::METH_RDY_moving()
{
  DEF_CAN_FIRE_moving = (tUInt8)1u;
  PORT_RDY_moving = DEF_CAN_FIRE_moving;
  return PORT_RDY_moving;
}

tUInt8 MOD_mkElevator::METH_direction()
{
  DEF_direction_reg__h12570 = INST_direction_reg.METH_read();
  PORT_direction = DEF_direction_reg__h12570;
  return PORT_direction;
}

tUInt8 MOD_mkElevator::METH_RDY_direction()
{
  DEF_CAN_FIRE_direction = (tUInt8)1u;
  PORT_RDY_direction = DEF_CAN_FIRE_direction;
  return PORT_RDY_direction;
}


/* Reset routines */

void MOD_mkElevator::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_moving_reg.reset_RST(ARG_rst_in);
  INST_floor_up_pressed.reset_RST(ARG_rst_in);
  INST_floor_down_pressed.reset_RST(ARG_rst_in);
  INST_floor_des.reset_RST(ARG_rst_in);
  INST_direction_reg.reset_RST(ARG_rst_in);
  INST_currentFloor.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkElevator::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkElevator::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_currentFloor.dump_state(indent + 2u);
  INST_direction_reg.dump_state(indent + 2u);
  INST_floor_des.dump_state(indent + 2u);
  INST_floor_down_pressed.dump_state(indent + 2u);
  INST_floor_up_pressed.dump_state(indent + 2u);
  INST_moving_reg.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkElevator::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 78u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_changeDirection", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_goingDown", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_goingUp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_stopGoingDown", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_stopGoingUp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_direction", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_floor_0_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_floor_0_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_floor_1_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_floor_1_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_floor_1_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_floor_2_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_floor_2_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_moving", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_setCurrentFloor", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_currentFloor_EQ_0_9___d64", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_currentFloor_EQ_1_4___d62", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_currentFloor_EQ_2___d59", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_direction_reg___d2", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_changeDirection", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_goingDown", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_goingUp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stopGoingDown", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stopGoingUp", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_floor_0_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_floor_0_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_floor_1_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_floor_1_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_floor_1_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_floor_2_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_floor_2_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_setCurrentFloor", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "direction_reg__h12570", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_des_BIT_0___h1625", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_des_BIT_1___h1547", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_des_BIT_2___h1392", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_des__h1624", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_down_pressed_BIT_0___h7760", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_down_pressed_BIT_1___h1584", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_down_pressed_BIT_2___h1506", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_down_pressed__h7759", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_up_pressed_BIT_0___h1739", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_up_pressed_BIT_1___h1780", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_up_pressed_BIT_2___h7357", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "floor_up_pressed__h7356", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "moving_reg__h10758", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h10658", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_floor_0_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_floor_0_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_floor_1_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_floor_1_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_floor_1_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_floor_2_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_floor_2_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_setCurrentFloor", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_direction", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_floor_0_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_floor_0_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_floor_1_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_floor_1_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_floor_1_up_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_floor_2_des_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_floor_2_down_request", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_moving", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_setCurrentFloor", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "direction", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "moving", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "setCurrentFloor_floor", 32u);
  num = INST_currentFloor.dump_VCD_defs(num);
  num = INST_direction_reg.dump_VCD_defs(num);
  num = INST_floor_des.dump_VCD_defs(num);
  num = INST_floor_down_pressed.dump_VCD_defs(num);
  num = INST_floor_up_pressed.dump_VCD_defs(num);
  num = INST_moving_reg.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkElevator::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkElevator &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkElevator::vcd_defs(tVCDDumpType dt, MOD_mkElevator &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_changeDirection) != DEF_CAN_FIRE_RL_changeDirection)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_changeDirection, 1u);
	backing.DEF_CAN_FIRE_RL_changeDirection = DEF_CAN_FIRE_RL_changeDirection;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_goingDown) != DEF_CAN_FIRE_RL_goingDown)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_goingDown, 1u);
	backing.DEF_CAN_FIRE_RL_goingDown = DEF_CAN_FIRE_RL_goingDown;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_goingUp) != DEF_CAN_FIRE_RL_goingUp)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_goingUp, 1u);
	backing.DEF_CAN_FIRE_RL_goingUp = DEF_CAN_FIRE_RL_goingUp;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_stopGoingDown) != DEF_CAN_FIRE_RL_stopGoingDown)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_stopGoingDown, 1u);
	backing.DEF_CAN_FIRE_RL_stopGoingDown = DEF_CAN_FIRE_RL_stopGoingDown;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_stopGoingUp) != DEF_CAN_FIRE_RL_stopGoingUp)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_stopGoingUp, 1u);
	backing.DEF_CAN_FIRE_RL_stopGoingUp = DEF_CAN_FIRE_RL_stopGoingUp;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_direction) != DEF_CAN_FIRE_direction)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_direction, 1u);
	backing.DEF_CAN_FIRE_direction = DEF_CAN_FIRE_direction;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_floor_0_des_request) != DEF_CAN_FIRE_floor_0_des_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_floor_0_des_request, 1u);
	backing.DEF_CAN_FIRE_floor_0_des_request = DEF_CAN_FIRE_floor_0_des_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_floor_0_up_request) != DEF_CAN_FIRE_floor_0_up_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_floor_0_up_request, 1u);
	backing.DEF_CAN_FIRE_floor_0_up_request = DEF_CAN_FIRE_floor_0_up_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_floor_1_des_request) != DEF_CAN_FIRE_floor_1_des_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_floor_1_des_request, 1u);
	backing.DEF_CAN_FIRE_floor_1_des_request = DEF_CAN_FIRE_floor_1_des_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_floor_1_down_request) != DEF_CAN_FIRE_floor_1_down_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_floor_1_down_request, 1u);
	backing.DEF_CAN_FIRE_floor_1_down_request = DEF_CAN_FIRE_floor_1_down_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_floor_1_up_request) != DEF_CAN_FIRE_floor_1_up_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_floor_1_up_request, 1u);
	backing.DEF_CAN_FIRE_floor_1_up_request = DEF_CAN_FIRE_floor_1_up_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_floor_2_des_request) != DEF_CAN_FIRE_floor_2_des_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_floor_2_des_request, 1u);
	backing.DEF_CAN_FIRE_floor_2_des_request = DEF_CAN_FIRE_floor_2_des_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_floor_2_down_request) != DEF_CAN_FIRE_floor_2_down_request)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_floor_2_down_request, 1u);
	backing.DEF_CAN_FIRE_floor_2_down_request = DEF_CAN_FIRE_floor_2_down_request;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_moving) != DEF_CAN_FIRE_moving)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_moving, 1u);
	backing.DEF_CAN_FIRE_moving = DEF_CAN_FIRE_moving;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_setCurrentFloor) != DEF_CAN_FIRE_setCurrentFloor)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_setCurrentFloor, 1u);
	backing.DEF_CAN_FIRE_setCurrentFloor = DEF_CAN_FIRE_setCurrentFloor;
      }
      ++num;
      if ((backing.DEF_NOT_currentFloor_EQ_0_9___d64) != DEF_NOT_currentFloor_EQ_0_9___d64)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_currentFloor_EQ_0_9___d64, 1u);
	backing.DEF_NOT_currentFloor_EQ_0_9___d64 = DEF_NOT_currentFloor_EQ_0_9___d64;
      }
      ++num;
      if ((backing.DEF_NOT_currentFloor_EQ_1_4___d62) != DEF_NOT_currentFloor_EQ_1_4___d62)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_currentFloor_EQ_1_4___d62, 1u);
	backing.DEF_NOT_currentFloor_EQ_1_4___d62 = DEF_NOT_currentFloor_EQ_1_4___d62;
      }
      ++num;
      if ((backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75) != DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75, 3u);
	backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75 = DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75;
      }
      ++num;
      if ((backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71) != DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71, 3u);
	backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71 = DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71;
      }
      ++num;
      if ((backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66) != DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66, 3u);
	backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66 = DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66;
      }
      ++num;
      if ((backing.DEF_NOT_currentFloor_EQ_2___d59) != DEF_NOT_currentFloor_EQ_2___d59)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_currentFloor_EQ_2___d59, 1u);
	backing.DEF_NOT_currentFloor_EQ_2___d59 = DEF_NOT_currentFloor_EQ_2___d59;
      }
      ++num;
      if ((backing.DEF_NOT_direction_reg___d2) != DEF_NOT_direction_reg___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_direction_reg___d2, 1u);
	backing.DEF_NOT_direction_reg___d2 = DEF_NOT_direction_reg___d2;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_changeDirection) != DEF_WILL_FIRE_RL_changeDirection)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_changeDirection, 1u);
	backing.DEF_WILL_FIRE_RL_changeDirection = DEF_WILL_FIRE_RL_changeDirection;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_goingDown) != DEF_WILL_FIRE_RL_goingDown)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_goingDown, 1u);
	backing.DEF_WILL_FIRE_RL_goingDown = DEF_WILL_FIRE_RL_goingDown;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_goingUp) != DEF_WILL_FIRE_RL_goingUp)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_goingUp, 1u);
	backing.DEF_WILL_FIRE_RL_goingUp = DEF_WILL_FIRE_RL_goingUp;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stopGoingDown) != DEF_WILL_FIRE_RL_stopGoingDown)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stopGoingDown, 1u);
	backing.DEF_WILL_FIRE_RL_stopGoingDown = DEF_WILL_FIRE_RL_stopGoingDown;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stopGoingUp) != DEF_WILL_FIRE_RL_stopGoingUp)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stopGoingUp, 1u);
	backing.DEF_WILL_FIRE_RL_stopGoingUp = DEF_WILL_FIRE_RL_stopGoingUp;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_floor_0_des_request) != DEF_WILL_FIRE_floor_0_des_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_floor_0_des_request, 1u);
	backing.DEF_WILL_FIRE_floor_0_des_request = DEF_WILL_FIRE_floor_0_des_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_floor_0_up_request) != DEF_WILL_FIRE_floor_0_up_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_floor_0_up_request, 1u);
	backing.DEF_WILL_FIRE_floor_0_up_request = DEF_WILL_FIRE_floor_0_up_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_floor_1_des_request) != DEF_WILL_FIRE_floor_1_des_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_floor_1_des_request, 1u);
	backing.DEF_WILL_FIRE_floor_1_des_request = DEF_WILL_FIRE_floor_1_des_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_floor_1_down_request) != DEF_WILL_FIRE_floor_1_down_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_floor_1_down_request, 1u);
	backing.DEF_WILL_FIRE_floor_1_down_request = DEF_WILL_FIRE_floor_1_down_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_floor_1_up_request) != DEF_WILL_FIRE_floor_1_up_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_floor_1_up_request, 1u);
	backing.DEF_WILL_FIRE_floor_1_up_request = DEF_WILL_FIRE_floor_1_up_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_floor_2_des_request) != DEF_WILL_FIRE_floor_2_des_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_floor_2_des_request, 1u);
	backing.DEF_WILL_FIRE_floor_2_des_request = DEF_WILL_FIRE_floor_2_des_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_floor_2_down_request) != DEF_WILL_FIRE_floor_2_down_request)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_floor_2_down_request, 1u);
	backing.DEF_WILL_FIRE_floor_2_down_request = DEF_WILL_FIRE_floor_2_down_request;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_setCurrentFloor) != DEF_WILL_FIRE_setCurrentFloor)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_setCurrentFloor, 1u);
	backing.DEF_WILL_FIRE_setCurrentFloor = DEF_WILL_FIRE_setCurrentFloor;
      }
      ++num;
      if ((backing.DEF_direction_reg__h12570) != DEF_direction_reg__h12570)
      {
	vcd_write_val(sim_hdl, num, DEF_direction_reg__h12570, 1u);
	backing.DEF_direction_reg__h12570 = DEF_direction_reg__h12570;
      }
      ++num;
      if ((backing.DEF_floor_des_BIT_0___h1625) != DEF_floor_des_BIT_0___h1625)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_des_BIT_0___h1625, 1u);
	backing.DEF_floor_des_BIT_0___h1625 = DEF_floor_des_BIT_0___h1625;
      }
      ++num;
      if ((backing.DEF_floor_des_BIT_1___h1547) != DEF_floor_des_BIT_1___h1547)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_des_BIT_1___h1547, 1u);
	backing.DEF_floor_des_BIT_1___h1547 = DEF_floor_des_BIT_1___h1547;
      }
      ++num;
      if ((backing.DEF_floor_des_BIT_2___h1392) != DEF_floor_des_BIT_2___h1392)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_des_BIT_2___h1392, 1u);
	backing.DEF_floor_des_BIT_2___h1392 = DEF_floor_des_BIT_2___h1392;
      }
      ++num;
      if ((backing.DEF_floor_des__h1624) != DEF_floor_des__h1624)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_des__h1624, 3u);
	backing.DEF_floor_des__h1624 = DEF_floor_des__h1624;
      }
      ++num;
      if ((backing.DEF_floor_down_pressed_BIT_0___h7760) != DEF_floor_down_pressed_BIT_0___h7760)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_down_pressed_BIT_0___h7760, 1u);
	backing.DEF_floor_down_pressed_BIT_0___h7760 = DEF_floor_down_pressed_BIT_0___h7760;
      }
      ++num;
      if ((backing.DEF_floor_down_pressed_BIT_1___h1584) != DEF_floor_down_pressed_BIT_1___h1584)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_down_pressed_BIT_1___h1584, 1u);
	backing.DEF_floor_down_pressed_BIT_1___h1584 = DEF_floor_down_pressed_BIT_1___h1584;
      }
      ++num;
      if ((backing.DEF_floor_down_pressed_BIT_2___h1506) != DEF_floor_down_pressed_BIT_2___h1506)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_down_pressed_BIT_2___h1506, 1u);
	backing.DEF_floor_down_pressed_BIT_2___h1506 = DEF_floor_down_pressed_BIT_2___h1506;
      }
      ++num;
      if ((backing.DEF_floor_down_pressed__h7759) != DEF_floor_down_pressed__h7759)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_down_pressed__h7759, 3u);
	backing.DEF_floor_down_pressed__h7759 = DEF_floor_down_pressed__h7759;
      }
      ++num;
      if ((backing.DEF_floor_up_pressed_BIT_0___h1739) != DEF_floor_up_pressed_BIT_0___h1739)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_up_pressed_BIT_0___h1739, 1u);
	backing.DEF_floor_up_pressed_BIT_0___h1739 = DEF_floor_up_pressed_BIT_0___h1739;
      }
      ++num;
      if ((backing.DEF_floor_up_pressed_BIT_1___h1780) != DEF_floor_up_pressed_BIT_1___h1780)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_up_pressed_BIT_1___h1780, 1u);
	backing.DEF_floor_up_pressed_BIT_1___h1780 = DEF_floor_up_pressed_BIT_1___h1780;
      }
      ++num;
      if ((backing.DEF_floor_up_pressed_BIT_2___h7357) != DEF_floor_up_pressed_BIT_2___h7357)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_up_pressed_BIT_2___h7357, 1u);
	backing.DEF_floor_up_pressed_BIT_2___h7357 = DEF_floor_up_pressed_BIT_2___h7357;
      }
      ++num;
      if ((backing.DEF_floor_up_pressed__h7356) != DEF_floor_up_pressed__h7356)
      {
	vcd_write_val(sim_hdl, num, DEF_floor_up_pressed__h7356, 3u);
	backing.DEF_floor_up_pressed__h7356 = DEF_floor_up_pressed__h7356;
      }
      ++num;
      if ((backing.DEF_moving_reg__h10758) != DEF_moving_reg__h10758)
      {
	vcd_write_val(sim_hdl, num, DEF_moving_reg__h10758, 1u);
	backing.DEF_moving_reg__h10758 = DEF_moving_reg__h10758;
      }
      ++num;
      if ((backing.DEF_x__h10658) != DEF_x__h10658)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h10658, 32u);
	backing.DEF_x__h10658 = DEF_x__h10658;
      }
      ++num;
      if ((backing.PORT_EN_floor_0_des_request) != PORT_EN_floor_0_des_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_floor_0_des_request, 1u);
	backing.PORT_EN_floor_0_des_request = PORT_EN_floor_0_des_request;
      }
      ++num;
      if ((backing.PORT_EN_floor_0_up_request) != PORT_EN_floor_0_up_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_floor_0_up_request, 1u);
	backing.PORT_EN_floor_0_up_request = PORT_EN_floor_0_up_request;
      }
      ++num;
      if ((backing.PORT_EN_floor_1_des_request) != PORT_EN_floor_1_des_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_floor_1_des_request, 1u);
	backing.PORT_EN_floor_1_des_request = PORT_EN_floor_1_des_request;
      }
      ++num;
      if ((backing.PORT_EN_floor_1_down_request) != PORT_EN_floor_1_down_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_floor_1_down_request, 1u);
	backing.PORT_EN_floor_1_down_request = PORT_EN_floor_1_down_request;
      }
      ++num;
      if ((backing.PORT_EN_floor_1_up_request) != PORT_EN_floor_1_up_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_floor_1_up_request, 1u);
	backing.PORT_EN_floor_1_up_request = PORT_EN_floor_1_up_request;
      }
      ++num;
      if ((backing.PORT_EN_floor_2_des_request) != PORT_EN_floor_2_des_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_floor_2_des_request, 1u);
	backing.PORT_EN_floor_2_des_request = PORT_EN_floor_2_des_request;
      }
      ++num;
      if ((backing.PORT_EN_floor_2_down_request) != PORT_EN_floor_2_down_request)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_floor_2_down_request, 1u);
	backing.PORT_EN_floor_2_down_request = PORT_EN_floor_2_down_request;
      }
      ++num;
      if ((backing.PORT_EN_setCurrentFloor) != PORT_EN_setCurrentFloor)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_setCurrentFloor, 1u);
	backing.PORT_EN_setCurrentFloor = PORT_EN_setCurrentFloor;
      }
      ++num;
      if ((backing.PORT_RDY_direction) != PORT_RDY_direction)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_direction, 1u);
	backing.PORT_RDY_direction = PORT_RDY_direction;
      }
      ++num;
      if ((backing.PORT_RDY_floor_0_des_request) != PORT_RDY_floor_0_des_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_floor_0_des_request, 1u);
	backing.PORT_RDY_floor_0_des_request = PORT_RDY_floor_0_des_request;
      }
      ++num;
      if ((backing.PORT_RDY_floor_0_up_request) != PORT_RDY_floor_0_up_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_floor_0_up_request, 1u);
	backing.PORT_RDY_floor_0_up_request = PORT_RDY_floor_0_up_request;
      }
      ++num;
      if ((backing.PORT_RDY_floor_1_des_request) != PORT_RDY_floor_1_des_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_floor_1_des_request, 1u);
	backing.PORT_RDY_floor_1_des_request = PORT_RDY_floor_1_des_request;
      }
      ++num;
      if ((backing.PORT_RDY_floor_1_down_request) != PORT_RDY_floor_1_down_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_floor_1_down_request, 1u);
	backing.PORT_RDY_floor_1_down_request = PORT_RDY_floor_1_down_request;
      }
      ++num;
      if ((backing.PORT_RDY_floor_1_up_request) != PORT_RDY_floor_1_up_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_floor_1_up_request, 1u);
	backing.PORT_RDY_floor_1_up_request = PORT_RDY_floor_1_up_request;
      }
      ++num;
      if ((backing.PORT_RDY_floor_2_des_request) != PORT_RDY_floor_2_des_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_floor_2_des_request, 1u);
	backing.PORT_RDY_floor_2_des_request = PORT_RDY_floor_2_des_request;
      }
      ++num;
      if ((backing.PORT_RDY_floor_2_down_request) != PORT_RDY_floor_2_down_request)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_floor_2_down_request, 1u);
	backing.PORT_RDY_floor_2_down_request = PORT_RDY_floor_2_down_request;
      }
      ++num;
      if ((backing.PORT_RDY_moving) != PORT_RDY_moving)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_moving, 1u);
	backing.PORT_RDY_moving = PORT_RDY_moving;
      }
      ++num;
      if ((backing.PORT_RDY_setCurrentFloor) != PORT_RDY_setCurrentFloor)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_setCurrentFloor, 1u);
	backing.PORT_RDY_setCurrentFloor = PORT_RDY_setCurrentFloor;
      }
      ++num;
      if ((backing.PORT_direction) != PORT_direction)
      {
	vcd_write_val(sim_hdl, num, PORT_direction, 1u);
	backing.PORT_direction = PORT_direction;
      }
      ++num;
      if ((backing.PORT_moving) != PORT_moving)
      {
	vcd_write_val(sim_hdl, num, PORT_moving, 1u);
	backing.PORT_moving = PORT_moving;
      }
      ++num;
      if ((backing.PORT_setCurrentFloor_floor) != PORT_setCurrentFloor_floor)
      {
	vcd_write_val(sim_hdl, num, PORT_setCurrentFloor_floor, 32u);
	backing.PORT_setCurrentFloor_floor = PORT_setCurrentFloor_floor;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_changeDirection, 1u);
      backing.DEF_CAN_FIRE_RL_changeDirection = DEF_CAN_FIRE_RL_changeDirection;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_goingDown, 1u);
      backing.DEF_CAN_FIRE_RL_goingDown = DEF_CAN_FIRE_RL_goingDown;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_goingUp, 1u);
      backing.DEF_CAN_FIRE_RL_goingUp = DEF_CAN_FIRE_RL_goingUp;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_stopGoingDown, 1u);
      backing.DEF_CAN_FIRE_RL_stopGoingDown = DEF_CAN_FIRE_RL_stopGoingDown;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_stopGoingUp, 1u);
      backing.DEF_CAN_FIRE_RL_stopGoingUp = DEF_CAN_FIRE_RL_stopGoingUp;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_direction, 1u);
      backing.DEF_CAN_FIRE_direction = DEF_CAN_FIRE_direction;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_floor_0_des_request, 1u);
      backing.DEF_CAN_FIRE_floor_0_des_request = DEF_CAN_FIRE_floor_0_des_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_floor_0_up_request, 1u);
      backing.DEF_CAN_FIRE_floor_0_up_request = DEF_CAN_FIRE_floor_0_up_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_floor_1_des_request, 1u);
      backing.DEF_CAN_FIRE_floor_1_des_request = DEF_CAN_FIRE_floor_1_des_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_floor_1_down_request, 1u);
      backing.DEF_CAN_FIRE_floor_1_down_request = DEF_CAN_FIRE_floor_1_down_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_floor_1_up_request, 1u);
      backing.DEF_CAN_FIRE_floor_1_up_request = DEF_CAN_FIRE_floor_1_up_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_floor_2_des_request, 1u);
      backing.DEF_CAN_FIRE_floor_2_des_request = DEF_CAN_FIRE_floor_2_des_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_floor_2_down_request, 1u);
      backing.DEF_CAN_FIRE_floor_2_down_request = DEF_CAN_FIRE_floor_2_down_request;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_moving, 1u);
      backing.DEF_CAN_FIRE_moving = DEF_CAN_FIRE_moving;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_setCurrentFloor, 1u);
      backing.DEF_CAN_FIRE_setCurrentFloor = DEF_CAN_FIRE_setCurrentFloor;
      vcd_write_val(sim_hdl, num++, DEF_NOT_currentFloor_EQ_0_9___d64, 1u);
      backing.DEF_NOT_currentFloor_EQ_0_9___d64 = DEF_NOT_currentFloor_EQ_0_9___d64;
      vcd_write_val(sim_hdl, num++, DEF_NOT_currentFloor_EQ_1_4___d62, 1u);
      backing.DEF_NOT_currentFloor_EQ_1_4___d62 = DEF_NOT_currentFloor_EQ_1_4___d62;
      vcd_write_val(sim_hdl, num++, DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75, 3u);
      backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75 = DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75;
      vcd_write_val(sim_hdl, num++, DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71, 3u);
      backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71 = DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71;
      vcd_write_val(sim_hdl, num++, DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66, 3u);
      backing.DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66 = DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66;
      vcd_write_val(sim_hdl, num++, DEF_NOT_currentFloor_EQ_2___d59, 1u);
      backing.DEF_NOT_currentFloor_EQ_2___d59 = DEF_NOT_currentFloor_EQ_2___d59;
      vcd_write_val(sim_hdl, num++, DEF_NOT_direction_reg___d2, 1u);
      backing.DEF_NOT_direction_reg___d2 = DEF_NOT_direction_reg___d2;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_changeDirection, 1u);
      backing.DEF_WILL_FIRE_RL_changeDirection = DEF_WILL_FIRE_RL_changeDirection;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_goingDown, 1u);
      backing.DEF_WILL_FIRE_RL_goingDown = DEF_WILL_FIRE_RL_goingDown;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_goingUp, 1u);
      backing.DEF_WILL_FIRE_RL_goingUp = DEF_WILL_FIRE_RL_goingUp;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stopGoingDown, 1u);
      backing.DEF_WILL_FIRE_RL_stopGoingDown = DEF_WILL_FIRE_RL_stopGoingDown;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stopGoingUp, 1u);
      backing.DEF_WILL_FIRE_RL_stopGoingUp = DEF_WILL_FIRE_RL_stopGoingUp;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_floor_0_des_request, 1u);
      backing.DEF_WILL_FIRE_floor_0_des_request = DEF_WILL_FIRE_floor_0_des_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_floor_0_up_request, 1u);
      backing.DEF_WILL_FIRE_floor_0_up_request = DEF_WILL_FIRE_floor_0_up_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_floor_1_des_request, 1u);
      backing.DEF_WILL_FIRE_floor_1_des_request = DEF_WILL_FIRE_floor_1_des_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_floor_1_down_request, 1u);
      backing.DEF_WILL_FIRE_floor_1_down_request = DEF_WILL_FIRE_floor_1_down_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_floor_1_up_request, 1u);
      backing.DEF_WILL_FIRE_floor_1_up_request = DEF_WILL_FIRE_floor_1_up_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_floor_2_des_request, 1u);
      backing.DEF_WILL_FIRE_floor_2_des_request = DEF_WILL_FIRE_floor_2_des_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_floor_2_down_request, 1u);
      backing.DEF_WILL_FIRE_floor_2_down_request = DEF_WILL_FIRE_floor_2_down_request;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_setCurrentFloor, 1u);
      backing.DEF_WILL_FIRE_setCurrentFloor = DEF_WILL_FIRE_setCurrentFloor;
      vcd_write_val(sim_hdl, num++, DEF_direction_reg__h12570, 1u);
      backing.DEF_direction_reg__h12570 = DEF_direction_reg__h12570;
      vcd_write_val(sim_hdl, num++, DEF_floor_des_BIT_0___h1625, 1u);
      backing.DEF_floor_des_BIT_0___h1625 = DEF_floor_des_BIT_0___h1625;
      vcd_write_val(sim_hdl, num++, DEF_floor_des_BIT_1___h1547, 1u);
      backing.DEF_floor_des_BIT_1___h1547 = DEF_floor_des_BIT_1___h1547;
      vcd_write_val(sim_hdl, num++, DEF_floor_des_BIT_2___h1392, 1u);
      backing.DEF_floor_des_BIT_2___h1392 = DEF_floor_des_BIT_2___h1392;
      vcd_write_val(sim_hdl, num++, DEF_floor_des__h1624, 3u);
      backing.DEF_floor_des__h1624 = DEF_floor_des__h1624;
      vcd_write_val(sim_hdl, num++, DEF_floor_down_pressed_BIT_0___h7760, 1u);
      backing.DEF_floor_down_pressed_BIT_0___h7760 = DEF_floor_down_pressed_BIT_0___h7760;
      vcd_write_val(sim_hdl, num++, DEF_floor_down_pressed_BIT_1___h1584, 1u);
      backing.DEF_floor_down_pressed_BIT_1___h1584 = DEF_floor_down_pressed_BIT_1___h1584;
      vcd_write_val(sim_hdl, num++, DEF_floor_down_pressed_BIT_2___h1506, 1u);
      backing.DEF_floor_down_pressed_BIT_2___h1506 = DEF_floor_down_pressed_BIT_2___h1506;
      vcd_write_val(sim_hdl, num++, DEF_floor_down_pressed__h7759, 3u);
      backing.DEF_floor_down_pressed__h7759 = DEF_floor_down_pressed__h7759;
      vcd_write_val(sim_hdl, num++, DEF_floor_up_pressed_BIT_0___h1739, 1u);
      backing.DEF_floor_up_pressed_BIT_0___h1739 = DEF_floor_up_pressed_BIT_0___h1739;
      vcd_write_val(sim_hdl, num++, DEF_floor_up_pressed_BIT_1___h1780, 1u);
      backing.DEF_floor_up_pressed_BIT_1___h1780 = DEF_floor_up_pressed_BIT_1___h1780;
      vcd_write_val(sim_hdl, num++, DEF_floor_up_pressed_BIT_2___h7357, 1u);
      backing.DEF_floor_up_pressed_BIT_2___h7357 = DEF_floor_up_pressed_BIT_2___h7357;
      vcd_write_val(sim_hdl, num++, DEF_floor_up_pressed__h7356, 3u);
      backing.DEF_floor_up_pressed__h7356 = DEF_floor_up_pressed__h7356;
      vcd_write_val(sim_hdl, num++, DEF_moving_reg__h10758, 1u);
      backing.DEF_moving_reg__h10758 = DEF_moving_reg__h10758;
      vcd_write_val(sim_hdl, num++, DEF_x__h10658, 32u);
      backing.DEF_x__h10658 = DEF_x__h10658;
      vcd_write_val(sim_hdl, num++, PORT_EN_floor_0_des_request, 1u);
      backing.PORT_EN_floor_0_des_request = PORT_EN_floor_0_des_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_floor_0_up_request, 1u);
      backing.PORT_EN_floor_0_up_request = PORT_EN_floor_0_up_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_floor_1_des_request, 1u);
      backing.PORT_EN_floor_1_des_request = PORT_EN_floor_1_des_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_floor_1_down_request, 1u);
      backing.PORT_EN_floor_1_down_request = PORT_EN_floor_1_down_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_floor_1_up_request, 1u);
      backing.PORT_EN_floor_1_up_request = PORT_EN_floor_1_up_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_floor_2_des_request, 1u);
      backing.PORT_EN_floor_2_des_request = PORT_EN_floor_2_des_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_floor_2_down_request, 1u);
      backing.PORT_EN_floor_2_down_request = PORT_EN_floor_2_down_request;
      vcd_write_val(sim_hdl, num++, PORT_EN_setCurrentFloor, 1u);
      backing.PORT_EN_setCurrentFloor = PORT_EN_setCurrentFloor;
      vcd_write_val(sim_hdl, num++, PORT_RDY_direction, 1u);
      backing.PORT_RDY_direction = PORT_RDY_direction;
      vcd_write_val(sim_hdl, num++, PORT_RDY_floor_0_des_request, 1u);
      backing.PORT_RDY_floor_0_des_request = PORT_RDY_floor_0_des_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_floor_0_up_request, 1u);
      backing.PORT_RDY_floor_0_up_request = PORT_RDY_floor_0_up_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_floor_1_des_request, 1u);
      backing.PORT_RDY_floor_1_des_request = PORT_RDY_floor_1_des_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_floor_1_down_request, 1u);
      backing.PORT_RDY_floor_1_down_request = PORT_RDY_floor_1_down_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_floor_1_up_request, 1u);
      backing.PORT_RDY_floor_1_up_request = PORT_RDY_floor_1_up_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_floor_2_des_request, 1u);
      backing.PORT_RDY_floor_2_des_request = PORT_RDY_floor_2_des_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_floor_2_down_request, 1u);
      backing.PORT_RDY_floor_2_down_request = PORT_RDY_floor_2_down_request;
      vcd_write_val(sim_hdl, num++, PORT_RDY_moving, 1u);
      backing.PORT_RDY_moving = PORT_RDY_moving;
      vcd_write_val(sim_hdl, num++, PORT_RDY_setCurrentFloor, 1u);
      backing.PORT_RDY_setCurrentFloor = PORT_RDY_setCurrentFloor;
      vcd_write_val(sim_hdl, num++, PORT_direction, 1u);
      backing.PORT_direction = PORT_direction;
      vcd_write_val(sim_hdl, num++, PORT_moving, 1u);
      backing.PORT_moving = PORT_moving;
      vcd_write_val(sim_hdl, num++, PORT_setCurrentFloor_floor, 32u);
      backing.PORT_setCurrentFloor_floor = PORT_setCurrentFloor_floor;
    }
}

void MOD_mkElevator::vcd_prims(tVCDDumpType dt, MOD_mkElevator &backing)
{
  INST_currentFloor.dump_VCD(dt, backing.INST_currentFloor);
  INST_direction_reg.dump_VCD(dt, backing.INST_direction_reg);
  INST_floor_des.dump_VCD(dt, backing.INST_floor_des);
  INST_floor_down_pressed.dump_VCD(dt, backing.INST_floor_down_pressed);
  INST_floor_up_pressed.dump_VCD(dt, backing.INST_floor_up_pressed);
  INST_moving_reg.dump_VCD(dt, backing.INST_moving_reg);
}
