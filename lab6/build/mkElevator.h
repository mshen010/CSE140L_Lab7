/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Mar  7 17:39:05 PST 2017
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkElevator_h__
#define __mkElevator_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkElevator module */
class MOD_mkElevator : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_currentFloor;
  MOD_Reg<tUInt8> INST_direction_reg;
  MOD_Reg<tUInt8> INST_floor_des;
  MOD_Reg<tUInt8> INST_floor_down_pressed;
  MOD_Reg<tUInt8> INST_floor_up_pressed;
  MOD_Reg<tUInt8> INST_moving_reg;
 
 /* Constructor */
 public:
  MOD_mkElevator(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_floor_0_up_request;
  tUInt8 PORT_EN_floor_1_up_request;
  tUInt8 PORT_EN_floor_1_down_request;
  tUInt8 PORT_EN_floor_2_down_request;
  tUInt8 PORT_EN_floor_0_des_request;
  tUInt8 PORT_EN_floor_1_des_request;
  tUInt8 PORT_EN_floor_2_des_request;
  tUInt8 PORT_EN_setCurrentFloor;
  tUInt32 PORT_setCurrentFloor_floor;
  tUInt8 PORT_RDY_floor_0_up_request;
  tUInt8 PORT_RDY_floor_1_up_request;
  tUInt8 PORT_RDY_floor_1_down_request;
  tUInt8 PORT_RDY_floor_2_down_request;
  tUInt8 PORT_RDY_floor_0_des_request;
  tUInt8 PORT_RDY_floor_1_des_request;
  tUInt8 PORT_RDY_floor_2_des_request;
  tUInt8 PORT_RDY_setCurrentFloor;
  tUInt8 PORT_moving;
  tUInt8 PORT_RDY_moving;
  tUInt8 PORT_direction;
  tUInt8 PORT_RDY_direction;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_setCurrentFloor;
  tUInt8 DEF_WILL_FIRE_floor_2_des_request;
  tUInt8 DEF_WILL_FIRE_floor_1_des_request;
  tUInt8 DEF_WILL_FIRE_floor_0_des_request;
  tUInt8 DEF_WILL_FIRE_floor_2_down_request;
  tUInt8 DEF_WILL_FIRE_floor_1_down_request;
  tUInt8 DEF_WILL_FIRE_floor_1_up_request;
  tUInt8 DEF_WILL_FIRE_floor_0_up_request;
  tUInt8 DEF_WILL_FIRE_RL_changeDirection;
  tUInt8 DEF_CAN_FIRE_RL_changeDirection;
  tUInt8 DEF_WILL_FIRE_RL_goingDown;
  tUInt8 DEF_WILL_FIRE_RL_goingUp;
  tUInt8 DEF_WILL_FIRE_RL_stopGoingDown;
  tUInt8 DEF_CAN_FIRE_RL_stopGoingDown;
  tUInt8 DEF_WILL_FIRE_RL_stopGoingUp;
  tUInt8 DEF_CAN_FIRE_RL_stopGoingUp;
  tUInt8 DEF_CAN_FIRE_RL_goingDown;
  tUInt8 DEF_CAN_FIRE_RL_goingUp;
  tUInt8 DEF_CAN_FIRE_direction;
  tUInt8 DEF_CAN_FIRE_moving;
  tUInt8 DEF_CAN_FIRE_setCurrentFloor;
  tUInt8 DEF_CAN_FIRE_floor_2_des_request;
  tUInt8 DEF_CAN_FIRE_floor_1_des_request;
  tUInt8 DEF_CAN_FIRE_floor_0_des_request;
  tUInt8 DEF_CAN_FIRE_floor_2_down_request;
  tUInt8 DEF_CAN_FIRE_floor_1_down_request;
  tUInt8 DEF_CAN_FIRE_floor_1_up_request;
  tUInt8 DEF_CAN_FIRE_floor_0_up_request;
  tUInt8 DEF_floor_des_BIT_0___h1625;
  tUInt8 DEF_floor_des_BIT_1___h1547;
  tUInt8 DEF_floor_des_BIT_2___h1392;
  tUInt8 DEF_floor_down_pressed_BIT_1___h1584;
  tUInt8 DEF_floor_down_pressed_BIT_2___h1506;
  tUInt8 DEF_floor_up_pressed_BIT_0___h1739;
  tUInt32 DEF_x__h10658;
  tUInt8 DEF_floor_up_pressed_BIT_1___h1780;
  tUInt8 DEF_floor_des__h1624;
  tUInt8 DEF_floor_down_pressed__h7759;
  tUInt8 DEF_floor_up_pressed__h7356;
  tUInt8 DEF_moving_reg__h10758;
  tUInt8 DEF_direction_reg__h12570;
  tUInt8 DEF_NOT_direction_reg___d2;
 
 /* Local definitions */
 private:
  tUInt8 DEF_floor_down_pressed_BIT_0___h7760;
  tUInt8 DEF_floor_up_pressed_BIT_2___h7357;
  tUInt8 DEF_NOT_currentFloor_EQ_2_9_AND_floor_des_BIT_2_2__ETC___d75;
  tUInt8 DEF_NOT_currentFloor_EQ_2_9_AND_floor_up_pressed_6_ETC___d66;
  tUInt8 DEF_NOT_currentFloor_EQ_2_9_AND_floor_down_pressed_ETC___d71;
  tUInt8 DEF_NOT_currentFloor_EQ_0_9___d64;
  tUInt8 DEF_NOT_currentFloor_EQ_1_4___d62;
  tUInt8 DEF_NOT_currentFloor_EQ_2___d59;
 
 /* Rules */
 public:
  void RL_goingUp();
  void RL_goingDown();
  void RL_stopGoingUp();
  void RL_stopGoingDown();
  void RL_changeDirection();
 
 /* Methods */
 public:
  void METH_floor_0_up_request();
  tUInt8 METH_RDY_floor_0_up_request();
  void METH_floor_1_up_request();
  tUInt8 METH_RDY_floor_1_up_request();
  void METH_floor_1_down_request();
  tUInt8 METH_RDY_floor_1_down_request();
  void METH_floor_2_down_request();
  tUInt8 METH_RDY_floor_2_down_request();
  void METH_floor_0_des_request();
  tUInt8 METH_RDY_floor_0_des_request();
  void METH_floor_1_des_request();
  tUInt8 METH_RDY_floor_1_des_request();
  void METH_floor_2_des_request();
  tUInt8 METH_RDY_floor_2_des_request();
  void METH_setCurrentFloor(tUInt32 ARG_setCurrentFloor_floor);
  tUInt8 METH_RDY_setCurrentFloor();
  tUInt8 METH_moving();
  tUInt8 METH_RDY_moving();
  tUInt8 METH_direction();
  tUInt8 METH_RDY_direction();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkElevator &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkElevator &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkElevator &backing);
};

#endif /* ifndef __mkElevator_h__ */
