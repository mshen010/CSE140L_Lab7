/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Mar  7 17:39:38 PST 2017
 * 
 */

/* Generation options: */
#ifndef __mkNextFloorStop_h__
#define __mkNextFloorStop_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkNextFloorStop module */
class MOD_mkNextFloorStop : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_c_direction;
  MOD_Reg<tUInt32> INST_current;
  MOD_Wire<tUInt32> INST_currentFloor_ignore;
  MOD_Reg<tUInt8> INST_currentFloor_initialized;
  MOD_Wire<tUInt32> INST_currentFloor_zaz;
  MOD_Reg<tUInt32> INST_cycle;
  MOD_Reg<tUInt8> INST_des;
  MOD_Wire<tUInt8> INST_direction_ignore;
  MOD_Reg<tUInt8> INST_direction_initialized;
  MOD_Wire<tUInt8> INST_direction_zaz;
  MOD_Reg<tUInt8> INST_display;
  MOD_Reg<tUWide> INST_down_des;
  MOD_Reg<tUInt8> INST_down_pressed;
  MOD_Wire<tUWide> INST_floor_down_des_ignore;
  MOD_Reg<tUInt8> INST_floor_down_des_initialized;
  MOD_Wire<tUWide> INST_floor_down_des_zaz;
  MOD_Wire<tUInt8> INST_floor_down_pressed_ignore;
  MOD_Reg<tUInt8> INST_floor_down_pressed_initialized;
  MOD_Wire<tUInt8> INST_floor_down_pressed_zaz;
  MOD_Wire<tUWide> INST_floor_up_des_ignore;
  MOD_Reg<tUInt8> INST_floor_up_des_initialized;
  MOD_Wire<tUWide> INST_floor_up_des_zaz;
  MOD_Wire<tUInt8> INST_floor_up_pressed_ignore;
  MOD_Reg<tUInt8> INST_floor_up_pressed_initialized;
  MOD_Wire<tUInt8> INST_floor_up_pressed_zaz;
  MOD_Reg<tUInt8> INST_nextTest;
  MOD_Reg<tUInt32> INST_phase;
  MOD_Reg<tUInt8> INST_reset_des_reg;
  MOD_Reg<tUInt32> INST_tle;
  MOD_Reg<tUWide> INST_up_des;
  MOD_Reg<tUInt8> INST_up_floor;
  MOD_Reg<tUInt8> INST_up_pressed;
 
 /* Constructor */
 public:
  MOD_mkNextFloorStop(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_down_pressed_BIT_2___h7605;
  tUInt8 DEF_up_pressed_BIT_1___h7300;
  tUInt8 DEF_down_pressed_BIT_1___h7572;
  tUInt8 DEF_up_pressed_BIT_0___h7267;
  tUInt8 DEF_down_pressed_BIT_0___h7539;
  tUInt8 DEF_up_pressed_BIT_2___h7333;
  tUInt8 DEF_des_BIT_0___h7812;
  tUInt8 DEF_des_BIT_1___h7845;
  tUInt8 DEF_des_BIT_2___h7878;
  tUInt32 DEF_x__h16599;
  tUInt8 DEF_des__h7877;
  tUInt8 DEF_down_pressed__h7604;
  tUInt8 DEF_up_pressed__h7332;
  tUInt8 DEF_display__h16295;
  tUInt8 DEF_NOT_down_pressed_1_BIT_0_2___d146;
  tUInt8 DEF_NOT_down_pressed_1_BIT_1_3___d147;
  tUInt8 DEF_NOT_down_pressed_1_BIT_2_4___d148;
  tUInt8 DEF_NOT_up_pressed_5_BIT_0_6___d135;
  tUInt8 DEF_NOT_up_pressed_5_BIT_1_7___d136;
  tUInt8 DEF_NOT_up_pressed_5_BIT_2_8___d137;
  tUInt8 DEF_NOT_des_8_BIT_0_9___d130;
  tUInt8 DEF_NOT_des_8_BIT_1_0___d131;
  tUInt8 DEF_NOT_des_8_BIT_2_1___d132;
  tUInt8 DEF_cycle_24_EQ_128___d235;
  tUInt8 DEF_cycle_24_EQ_0___d234;
 
 /* Local definitions */
 private:
  tUInt8 DEF_c_direction__h18832;
  tUInt32 DEF_x__h16446;
  tUInt32 DEF_v__h4902;
  tUInt32 DEF_new_value__h4538;
  tUInt32 DEF_v__h3561;
  tUInt32 DEF_v__h3523;
  tUInt32 DEF_v__h3485;
  tUInt32 DEF_v__h2578;
  tUInt32 DEF_v__h1480;
  tUInt32 DEF_v__h1442;
  tUInt32 DEF_v__h1404;
  tUInt32 DEF_v__h327;
  tUInt32 DEF_v__h14224;
  tUInt32 DEF_v__h13653;
  tUInt32 DEF__1_PLUS_IF_IF_up_des_56_BIT_31_57_THEN_NEG_0_CO_ETC___d168;
  tUWide DEF_x_wget__h3391;
  tUWide DEF_x_wget__h1310;
  tUWide DEF_down_des__h14338;
  tUWide DEF_up_des__h13868;
  tUInt32 DEF_x_wget__h4402;
  tUInt8 DEF_x_wget__h2521;
  tUInt8 DEF_x_wget__h262;
  tUInt32 DEF_x__h13816;
  tUInt8 DEF_v__h2658;
  tUInt8 DEF_v__h408;
  tUInt8 DEF_up_des_BIT_31___h13787;
  tUInt32 DEF_v__h4576;
  tUInt32 DEF_IF_up_des_56_BIT_31_57_THEN_NEG_0_CONCAT_IF_up_ETC___d164;
  tUWide DEF_value__h1564;
  tUWide DEF_value__h3645;
  tUInt32 DEF__0_CONCAT_IF_up_des_56_BIT_31_57_THEN_NEG_up_de_ETC___d162;
  tUInt32 DEF_value__h4579;
  tUWide DEF_new_value__h1523;
  tUWide DEF_new_value__h3604;
  tUInt8 DEF_NOT_c_direction_9___d117;
  tUInt8 DEF_NOT_current_0_EQ_0_1___d202;
  tUInt8 DEF_NOT_current_0_EQ_1_9___d200;
  tUInt8 DEF_NOT_current_0_EQ_2_5___d198;
  tUInt8 DEF_direction_zaz_whas__0_AND_direction_zaz_wget__1___d52;
  tUWide DEF_y__h2298;
  tUWide DEF_y__h4178;
  tUWide DEF_v__h1561;
  tUWide DEF_v__h3642;
  tUInt32 DEF_x__h16595;
 
 /* Rules */
 public:
  void RL_floor_up_pressed_every();
  void RL_floor_up_pressed_every_1();
  void RL_floor_up_des_every();
  void RL_floor_up_des_every_1();
  void RL_floor_down_pressed_every();
  void RL_floor_down_pressed_every_1();
  void RL_floor_down_des_every();
  void RL_floor_down_des_every_1();
  void RL_currentFloor_every();
  void RL_currentFloor_every_1();
  void RL_direction_every();
  void RL_direction_every_1();
  void RL_upFloor();
  void RL_go_to_next_stop();
  void RL_finish();
  void RL_reset_des();
  void RL_test();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkNextFloorStop &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkNextFloorStop &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkNextFloorStop &backing);
};

#endif /* ifndef __mkNextFloorStop_h__ */
