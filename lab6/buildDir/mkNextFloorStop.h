/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Thu Mar  9 21:05:03 PST 2017
 * 
 */

/* Generation options: */
#ifndef __mkNextFloorStop_h__
#define __mkNextFloorStop_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkTbNextFloor.h"


/* Class declaration for the mkNextFloorStop module */
class MOD_mkNextFloorStop : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_cycle;
  MOD_mkTbNextFloor INST_testTb;
 
 /* Constructor */
 public:
  MOD_mkNextFloorStop(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt32 DEF_x__h136;
  tUInt8 DEF_cycle_EQ_128___d3;
  tUInt8 DEF_cycle_EQ_0___d2;
 
 /* Local definitions */
 private:
  std::string DEF_IF_testTb_getObj_0_BIT_39_3_THEN_STR_True_ELSE_ETC___d213;
  std::string DEF_IF_testTb_getObj_0_BIT_40_0_THEN_STR_True_ELSE_ETC___d217;
  std::string DEF_IF_testTb_getObj_0_BIT_41_8_THEN_STR_True_ELSE_ETC___d221;
  std::string DEF_IF_testTb_getObj_0_BIT_38_1_THEN_STR_True_ELSE_ETC___d222;
  std::string DEF_IF_testTb_getObj_0_BIT_37_8_THEN_STR_True_ELSE_ETC___d218;
  std::string DEF_IF_testTb_getObj_0_BIT_36_6_THEN_STR_True_ELSE_ETC___d214;
  std::string DEF_IF_testTb_getObj_0_BIT_35_2_THEN_STR_True_ELSE_ETC___d223;
  std::string DEF_IF_testTb_getObj_0_BIT_33_4_THEN_STR_True_ELSE_ETC___d215;
  std::string DEF_IF_testTb_getObj_0_BIT_34_8_THEN_STR_True_ELSE_ETC___d219;
 
 /* Rules */
 public:
  void RL_test();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkNextFloorStop &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkNextFloorStop &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkNextFloorStop &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkNextFloorStop &backing);
};

#endif /* ifndef __mkNextFloorStop_h__ */
