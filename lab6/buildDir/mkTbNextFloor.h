/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Thu Mar  9 21:05:03 PST 2017
 * 
 */

/* Generation options: */
#ifndef __mkTbNextFloor_h__
#define __mkTbNextFloor_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTbNextFloor module */
class MOD_mkTbNextFloor : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt32> INST_currentFloor_ignore;
  MOD_Reg<tUInt8> INST_currentFloor_initialized;
  MOD_Wire<tUInt32> INST_currentFloor_zaz;
  MOD_Reg<tUInt32> INST_cycle;
  MOD_Wire<tUInt8> INST_direction_ignore;
  MOD_Reg<tUInt8> INST_direction_initialized;
  MOD_Wire<tUInt8> INST_direction_zaz;
  MOD_Wire<tUInt8> INST_floor_des_ignore;
  MOD_Reg<tUInt8> INST_floor_des_initialized;
  MOD_Wire<tUInt8> INST_floor_des_zaz;
  MOD_Wire<tUInt8> INST_floor_down_pressed_ignore;
  MOD_Reg<tUInt8> INST_floor_down_pressed_initialized;
  MOD_Wire<tUInt8> INST_floor_down_pressed_zaz;
  MOD_Wire<tUInt8> INST_floor_up_pressed_ignore;
  MOD_Reg<tUInt8> INST_floor_up_pressed_initialized;
  MOD_Wire<tUInt8> INST_floor_up_pressed_zaz;
  MOD_Fifo<tUInt64> INST_outFIFO;
 
 /* Constructor */
 public:
  MOD_mkTbNextFloor(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt32 DEF_x__h3971;
  tUInt8 DEF_cycle_6_EQ_128___d38;
  tUInt8 DEF_cycle_6_EQ_0___d37;
 
 /* Local definitions */
 private:
  tUInt32 DEF_v__h3556;
  tUInt32 DEF_new_value__h3175;
  tUInt32 DEF_v__h2224;
  tUInt32 DEF_v__h1354;
  tUInt32 DEF_v__h314;
  tUInt32 DEF_x_wget__h3039;
  tUInt8 DEF_x_wget__h2167;
  tUInt8 DEF_x_wget__h1297;
  tUInt8 DEF_x_wget__h249;
  tUInt8 DEF_direction_zaz_whas____d33;
  tUInt8 DEF_direction_zaz_wget____d34;
  tUInt8 DEF_v__h395;
  tUInt8 DEF_v__h1434;
  tUInt32 DEF_value__h3216;
  tUInt8 DEF_v__h2304;
  tUInt32 DEF_v__h3213;
 
 /* Rules */
 public:
  void RL_floor_up_pressed_every();
  void RL_floor_up_pressed_every_1();
  void RL_floor_down_pressed_every();
  void RL_floor_down_pressed_every_1();
  void RL_floor_des_every();
  void RL_floor_des_every_1();
  void RL_currentFloor_every();
  void RL_currentFloor_every_1();
  void RL_direction_every();
  void RL_direction_every_1();
  void RL_test();
 
 /* Methods */
 public:
  tUInt64 METH_getObj();
  tUInt8 METH_RDY_getObj();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbNextFloor &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTbNextFloor &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTbNextFloor &backing);
};

#endif /* ifndef __mkTbNextFloor_h__ */
